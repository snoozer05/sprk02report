! Regional Ruby Kaigi レポート (13) 札幌 Ruby 会議 02

! はじめに

2009 年 12 月 5 日に札幌で開催される地域 Ruby 会議として今年で 2 回目となる札幌 Ruby 会議 02 が開催されました。
今回は、道外で活躍している方々もたくさん参加して頂きました。発表者の方ではなく純粋に札幌Ruby会議へ参加された方もおりました。また、一時間ほどの懇親スイーツタイムにて、道外の方と沢山お話する時間があり「ここは本当に札幌なのだろうか!?」と思わせる開催内容でした。

! 札幌 Ruby 会議 02 について
:'''開催日''':2009/12/5(土) 11:30 〜 18:30
:'''開催場所''':[[札幌市産業振興センター|http://sangyo.center.sec.or.jp/]]
:'''開催母体''':札幌Ruby会議02実行委員会, [[Ruby札幌|http://ruby-sapporo.org/]]
:'''協賛''':さっぽろ産業振興財団 高度情報通信人材育成事業 プラットフォームワークショップ
:'''後援''':[[日本Rubyの会|http://jp.rubyist.net/]], [[LOCAL|http://www.local.gr.jp/]]
:'''参加者''':当日会場を訪れた参加者数:およそ 112 名
:'''動画・資料''':[[公式ページ|http://regional.rubykaigi.org/sapporo02]]
:'''公式タグ''':sappororubykaigi02 ([[はてなブックマークでの検索結果|http://b.hatena.ne.jp/t/sappororubykaigi02]])
:'''公式ハッシュタグ''':#sprk02

! プログラム

!! Techセッション1
!!! 「tDiary annual report 2009」(柴田 博志(hsbt) - [[tDiary.org|http://www.tdiary.org/]])
SapporoRubyKaigi01から1年間のtDiaryProjectの開発状況や、ruby1.9対応、技術的な話だけではなく、Rubyの開発を取り巻く環境の変化の話についてお話ししてくれました。
本日の発表で、tDiaryとRubyへ興味を持って、皆さんがさわるきっかけになればいいなと思います。
札幌Ruby会議01の発表後、tDiaryの使い道として、日記だけではなく業務日誌として社内で重宝しているという活用事例があるとのことでした。この活用方法は柴田さんもお勧め
していましたので、ぜひ皆さんも活用してみてはどうでしょうか。tDiaryによるRuby1.9普及作戦として、「1.9はいつかは使わなければならない」、「tDiaryをRuby1.9普及のキラーアプリにする」、
「アプリが1.9対応しているので、Rubyを1.9にアップグレードするように誘導する」という活動をされていたそうです。
次に、この一年間の具体的な活動報告の紹介がありました。札幌Ruby会議01では、tDiary 2.3.1でした。現在の最新版は、2009/05/08にリリースしたtDiary 2.3.2で、Ruby1.9に対応しています。
最初にRuby 1.9で動かすとエラーだらけで大変だったのですが、まずは対策を計画しなければならないと考え、「アジャイルな見積もりと計画づくり」を参考にして計画を立てたそうです。その際には、
作戦会議では主にホワイトボードを活用して作業を進めているそうです。
Ruby1.9対応の主な変更点は、「過去バージョンとの非互換部分」、「文字エンコーディングの変更」に対応することにしました。非互換部分については、compatible.rbで吸収しているので、1.8と
1.9の違いはこのソースを見ることで勉強できますとのことです。文字エンコーディングについては、先頭にmagic commentを一括指定してencodingを明示し、外部エンコーディング指定につていは、
RUBY_VERSIONを使用せず、Encoding:default_externalを使用するようにしたとおっしゃってました。詳しくは、RubyKaigi2009のスライドを参照ください。
最後に、本日の発表以降の作業内容のお話がありました。「自動テストの仕組みを取り入れる」、「CGIからRackへの載せ替え」、「機能追加と不具合修正」についての対応は完了しています。未解決
の問題としては、「XML-RPCを捨てAtomへ移行する」ことがありますとおっしゃってました。
最後に、
* 2009年もtDiaryはRubyと共に成長しました
* 2010年もrubyととともに成長していく
* Rubyistに出来ることをやるならtDiary
ということで、まとめられました。三つ目のRubyisytに出来ることについては、るびまの「Rubyistにできること」に書いてありますので、ぜひ読んでみてくださいとおっしゃっておりました。

!! Techセッション2
!!! 「知らないと損をするSmalltalk」 (sumim - squeak-ja)
オブジェクト指向の本質、パターンとの関わり方、GUIの起源…。 日常のモヤモヤの中核にありながら、語れる人が少ないSmalltalkについて解説されました。
お話の切り出しは「Smalltalkのtは小文字です」でした。今日はこれを最低覚えて帰ってくださいとのことでしたw。最近はこれを言い続けているので、ブログのタイトルもこれに変えてしまったと
のことでした。Smalltalkの特色は「古いのに新しい」、「言語ではなく環境」、「シンプルなのに難解」、「知識よりも体験」であるとおっしゃってました。
最初は、Smalltalkの歴史のお話に始まり、言語の特色は、「全てがオブジェクトである」。Rubyと少し違うところは、「ほぼ全てをメッセージングで行おうとする」ということでした。メッセージ
を送ることは、オブジェクト指向の始祖的な存在としてSmalltalkが上げられるが、オブジェクト指向は大雑把に分けて大きく二つに分けられ、Smalltalkは抽象データ型のOOではなく、アラン・ケイ
の考えたメッセージング中心のOOであるとおっしゃってました。
SmalltalkはRubyにも多大な影響を与えているとの説明では、「ブロック付きメソッド呼び出し」を取り上げて、RubyとSmalltalkのコード比較があったのですが、殆ど同じように記述できている
ことを見せてもらいました。SmalltalkなRuby処理系では「Rubinius」、「MagLev」、Smalltalk発のRuby新機能としては、「Traits」、「Classboxes」などです。実際にMagLevのデモで、
新しいインスタンスを作成して、同じオブジェクトIDが返却されるという、処理系の外にオブジェクトが保存されることを見せてくれました。　
そして、Smalltalkは言語だけではなく、他の環境にも影響を及ぼしているということで、GUIの起源についてのお話がありました。現在のGUIの起源はMacではなく、Smalltalk愛好家からは
Smalltalkであるとおっしゃってました。
具体的には、右クリックメニューやコピー&ペースト、マルチフォントの取り込みなども、当時のSmalltalkには実装されているという内容でした。続いて、Smalltalkの影響がGUIだけではなく、
NeXTSTEPにも影響を与えているそうです。
そして、Smalltalkが、なぜ長期に渡って生きながらえ、他に影響を与え、新しい発想を育み続けられるのか、ということを謎に考えていましたが、最近一つの考えを見つけ出したとおっしゃってました。
Smalltalkと他者との違いについてを「利用者主体の斬新的成長が可能かどうか」ではないかということで、「自然都市(Smalltalk) VS 人工都市(他者)」であるとおっしゃっていました。
ここらへんの詳しいお話は、江渡さんの「パターン、Wiki、XP」を参照くださいとのことでした。最後に、Smalltalkの文法や勉強方法のお話がありました。文法については、リテラル（6種）、
予約語、文法、メソッド定義テンプレートを覚えるだけで、大丈夫とのことです。ですが、なかなか本で学ぶことが難しいので、独学ではなく、使い方がわかる人が居るところ（しかも少人数が望ましい）
で学ぶことがいいでしょうとおっしゃっておりました。

!! Techセッション3
!!! 「RubyでPostgreSQLとお話する方法」(石田 朗雄 - 株式会社サイクル・オブ・フィフス)
勉強会のスタイルが、「知らないことを、当日までに必死で調べて発表する」という石田さんが、RubyでPostgreSQLを操作するためのTipsやその背景にあるlibpqの機能についてお話ししてくれました。
RubyとPostgreSQLと題して、始めに、「プログラムからSQLを実行するということ」についてのお話がありました。Postgresにはクライアント／サーバーモデルなので、クライアントとサーバ間でソケット
通信がある。それは、Frontend/Backendプロトコルと呼ばれていて、PostgreSQLの標準のドキュメントにもプロトコルの説明があります。このプロトコルがあるのはいいけど、RubyやJavaから接続したい
よという場合に、そのドライバを作る人がそのプロトコルを実装するのが大変だということで、実際に言語から接続ドライバには二種類の実装がある。そのうちの一つがプロトコルを実装してあるC言語のライブラリ
libpqがあるので、これを使って接続する。これを使えば実装で楽をできる。
PostgreSQLに接続する場合、Javaだとlibpqを使わないで、TYPE4のドライバで実装をします。一方、Rubyの場合はどうであるかというと、libpqを使う場合と使わない場合の両方が存在します。libpqを
使用した実装が「ruby-postgres」で、libpqを使用しないのが「postgres-pr」となっています。
2007年のRuby勉強会@札幌の時点では、前者が「メンテされていない状態」、後者が「メソッドが少ない」。PGconnのインスタンスメソッドを比較したところ、postgres-prは6つしかなくて少なすぎるということで
した。この発表の直後に、ruby-pgとうライブラリ（libpqを使用）が出た。PGconnのインスタンスメソッドが非常に多い（スライド一枚がうまるくらい）。これは最強のRubyのlibpqラッパーである。
尚、ruby-pgの使い方は、『Ruby逆引きレシピ』を参照くださいとのことでしたが、本日はレシピに存在しないお話をしてくれました。riのドキュメントを見ても引数に何を指定していいのかよくわからない。
optionsって何だよとか。そういうときは、libpqのラッパーであるのでlibpqのドキュメントを読むことが一番である。
ruby-pgの便利な機能として、非同期問い合わせ、非同期通知、SQLSTATEのエラーコードを返す、SSLサポートなどがありますので、一度libpqのドキュメントを読んでみてほしいということでした。

!!! 「レシピに書かれていないこと」(須藤 功平 - 株式会社クリアコード)
Ruby札幌を応援している須藤さんより、Ruby逆引きレシピに載っている須藤プロダクツのうち、いくつかのレシピをライブコーディングにて、もっと掘り下げて紹介してくださいました。
お話の冒頭にて、プレゼンツールのRabbit、迷惑メール対策のmilter manager(こちらはOSC2009 Hokkaidoでお話されておりました)の紹介がありました。本日のスライドももちろん
Rabbitで作成されています。最近、ついにまつもとさんがRabbitユーザになってくれましたとおっしゃってました。
また、札幌たいやきツアーのご紹介もありました。札幌市東区にある柳屋さんのご紹介がありました。ちなみにどなたでも参加可能とのことでしたので、興味のある方は須藤さんへ連絡
してみるといいと思います。
本日のライブコーディングの内容は、「レシピに書かれているもの」と「書かれている以外の使い方」となっており、前者は、レシピ113:ActiveLdap(るびまのActiveLdapを使ってみようを参考）、
レシピ149/150:RSS Parser、レシピ155:rcairo(るびまのcairo 2次元ライブラリを参考)がり、後者には「groonga」、「Poppler」があります。これらを利用したライブコーディングを行って
いただきました。
コードを書くと人が変わってしまう須藤さんが、「口だじゃなく、コードを書け!」、「よいプログラマは自生しない」とおっしゃっていました。具体的に言うと、本の知識やデザインパターンを覚える
だけとか、コミットメールを見ているだけでは、理解することができないとおっしゃり、その回答として、ペアプロとか。他の人がどうやってコードを書いているかを見ることが大事なので、そして、
それを日々に実践してほしいとおっしゃりました。
この説明のあと、以下の技術を用いて、ライブコーディングしながら、検索処理やサムネイル生成するところを見せてくれました。この時に、会場からは、「コーディングが早い」、「凄い」との声が
聞こえてきました。
* メール検索
** 利用ライブラリ
***  Sinatra(http://www.sinatrarb.com/intro-jp.html)
***	Haml(http://haml.ursm.jp/)
***	Ruby/groonga(全文検索エンジン)
***	Mail

* PDF内検索、PDFサムネイル生成
** poppler
** cairo

!! プラットフォームワークショップ枠1
!!! 「Ruby における 2038年問題の解決」 (田中哲(akr) - 産総研)
概要
RubyのTimeクラスは2038年1月19日までしか表現できない場合がある。 このため、データベースやメール
のヘッダなど外部から提供された時刻を扱うときに、Timeクラスを使用できないことがある。 この制約はOS 
が提供するtime_t型が符号つき32bit整数である場合に生じるが、time_t型を越えた値もTimeクラス
で扱えるようにすることによってこの問題を解決した。 この際、OS が提供していないタイムゾーン情報・夏時
間情報を推測する必要がある。 この解決によって Time クラスをより広い用途に利用できるようになった。

▼概要
Ruby1.9.2でTimeクラスの制約が緩和されました。2038年以降も表現可能、1901年以前も表現可能、Ruby1.8はマイクロ秒までしか表現できなかったのをRuby1.9.2では細かい制度で表現可能、任意の時差を表現可能にして、不合理な制約をなくすことにより容易なプログラミングを実現しようというのが意図であるとおっしゃってました。
どういうときに役に立つのだろうかということを想定されるありそうなストーリーで考えてみる。Rubyでは、時刻を表現するのに普通Timeクラスを使う。アプリケーションでTimeを使うことはよくある。だいたい、それで動作する。あるとき、メールやデータベースから、範囲外の時刻が届く。アプリケーションが動かないことがあると、そもそもTimeを使うのが間違いだということが判明して大改修する。Timeが広ければよかったのにと思う。このようなストーリーを実現したというお話です。
Unix伝統の制約として、伝統的にtime_tは32bit符号付き整数、-2147483648〜2147483648　21億くらい表現可能となっており、これが、1970-01-01 00:00:00 UTCを起点とする秒数で、表現可能範囲が1901-12-14〜2038-01-19まで表現可能となっており、これが属に言う2038年問題である。
ついでに、2922億年問題の解決 -64bit制約のクリアもしました。これにより、-292277022657年〜292277026596年も表現できるようになりました。
また、1秒以下の表現 -秒に有理数を使えるようになり、Ruby1.8はマイクロ秒単位でしたが、Ruby1.9.1はナノ秒単位で、有理数を扱えるようになりました。また、Timeオブジェクト毎に表現を変えられるようにもなり、Ruby1.9ではいろいろ表現可能になりましたとのことでした。
次に、問題に対する背景のお話がありました。背景には、自然の話、人間の話、技術の話の３つがあります。
自然(科学)の話としては、時刻システムは、地球の自転や人間の暦の話について集積したところなので、以下のことに影響してくる。
地球の公転周期は自転周期の整数倍でない、自転周期は（原子時計による）1秒の整数倍でない、そもそも自転周期は一定でないことなどがあり、自然の問題はいろいろ時刻には難しい問題があります。
人間(暦)の話としては、人間の要求として、12月は（北半球で）冬であってほしいとか、一年という周期は季節のめぐりに一致してほしいとか
があります。もう少し正確に言うと、春分の日は3/20か3/21であってほしい、という社会的要求がある。ところが、公転周期は自転周期の非整数倍
つまり、太陽が地球を一周するときに、地球が何回まわるかというと、整数回ではなくて、だいたい365回と0.24...回かかるわけだが、もし整数倍
なら一年が何日って決めてしまえば、ちょうどぴったり毎回一致するけど、実際はそうではないので、閏年（閏日２月２９日）で、一年の日数を調整して、
閏年で吸収している。12時は昼であってほしい。日本であろうが、ブラジルやアルゼンチンであろうが、12時は昼であってほしい。地球は丸いので地域差
がある。これらの要求があるので、時差で調整（各国で決定）している。自転周期は秒の非整数倍、閏秒で1日の秒数を調整（国際機構で決定）、夏時間：
夏のあいだ時差を政治的な理由で変更しているそうです。
このような話に対し、システムではだいたいよく使われるところをサポートするようにできているとおっしゃってました。
そして、技術的なお話として、
*32bit time_tの制約(1901年〜2038年)
*struct tm のtm_yearの制約(±21億年）
*4bit time_tの制約(±2922億年)
*タイムゾーン情報(夏時間、閏秒）の配布
*単一プロセス内での複数のタイムゾーン
についてお話されました。
Unitは、32bit time_tなので、1970を起点としたシステムを使っている (1901年〜2038年)これが2038年問題を発生させている。
これをクリアすると次に問題となるのが、time_tは1970から何秒経ったかを表す整数だが、それを何年、何月、何日、何時、何分、
何秒というstruct tmのtm_yearフィールドの制約(±21億年）にあたってしまいます。これをクリアすると64bit time_tの制約(±2922億年)
これをクリアするとタイムゾーン情報(夏時間、閏秒）の配布。暦の問題は、各国で違い、その情報がないと正しく時刻を処理できないので、それ
をどこに持たすか？しかも、ルールが変わることがある。などの問題が出てくる。
*単一プロセス内での複数のタイムゾーンのサポートがない
*POSIXのナノ秒タイムスタンプ 10**(-9)
*FreeBSDのbintime 2**(-64)
*64bit time_tをサポートするOSの普及
などなど、技術に変化が生じている。こういう中で、RubyというOSの上に乗っている単一のアプリが
何をするか。何をしたら幸せになれるかを考えてみた。次にそれを紹介します。

次は、設計方針についてのお話がありました。
＜扱う＞
・Ruby1.8でできること。
　time_tの範囲内
　システムのタイムゾーン
　UTC
  OSが扱うなら、うるう秒

・有理数
  1**(-9)と2**(-64)を両方とも正確に扱えるad hocでない仕様

＜扱わない＞
・相対論
　位置や速度は嫌
・グレゴリオ歴以外の暦
太陽太陰暦では、「閏３月」とか言われても困る。ついでに、ユリウス日は微妙なんだけど、
あきらめる。
　
▼難しいがなんとか扱いたい
・OSのサポート範囲外の時刻は、扱いたい。つまり2038年問題
　問題：時差・閏秒の情報がOSから得られない。
　1970年からの何年何月とかに変換するときに必要な情報。
・複数のタイムゾーン
　問題：時差の情報が得られない

OSが時差・閏秒の情報を提供してくれないのが問題。

では、その情報は、どこにあるかというと
▼時差・閏秒の情報:zoneinfo
UNIXでは、例:/usr/share/zoneinfo/Asia/Tokyoなどにあります。
ある地域における、時差の時系列変化のデータ各国の気まぐれで変化する。
閏秒のデータ
  国際機関が決定するので世界中で統一されている。ただし、zoneinfoのファイル内に情報が
  入っている。
  地球の回り具合に対応して追加されていく。
どちらも継続的な更新が必要
一般にOSベンダがデータの更新を用意しえいる

▼zoneinfoの問題
このデータをどうするかが問題で、これをOSの範囲ないで使うと、time_tの範囲内しか得られない
ので、　32bit符号付きtime_tなら2038年問題が生じてしまう。
アクセスAPIの機能が足りない
　ファイルは沢山あるので、それぞれにアクセスするAPIがあればいいが、実際はない。その結果
　として、基本的に単一のタイムゾーンしか扱えない。
APIは標準化されているが、格納形式はOSに　ファイル自体はOSに依存していて標準化されていない。

この状態でどうしたらよいか？
一つの解として、zoneinfoを自前で持つ(Java,PHP)、zoneinfoを持たない(Perl,Ruby)

▼zoneinfoを自前で持つ？
利点
データを自前でもつので、
標準APIを無視して直接アクセスできる
OSに依存しないですべてのタイムゾーンの情報を安定して得られる
time_tよりも広い範囲の情報を用意できる
複数のタイムゾーンもサポートできる
ということができる。

欠点
OSの更新に頼らずに自前で更新しなければならない
  なんでかというと、ツールが自前で持つとOSをアップデートして
  そのツール用のデータをアップデートする必要がある。
OSが使っているzoneinfoと言語処理系に埋め込んだものと一致しないかも

という欠点があるので、なるべくならOSのzoneinfoでやりたい。

▼OSのzoneinfoだけでどかまでやれるか？
2038年問題
　Perlのアイデア
　　2038年以前の時差情報からそれ以降を推測する。
複数のタイムゾーン
　時差が固定の(夏時間がない）仮想的なタイムゾーンは扱える
　環境変数TZを変えるのは難しい問題がある
　（OSによるタイムゾーン名の差異、レースコンディション）

これくらいが、恐らくOSのzoneinfoを取り込まないでできる限界であろう。

▼ruby1.9.2の選択としては、
更新の問題があるので、zoneinfoは自前では持たない。2038年問題はPerl同様に解決して、
時差が固定のタイムゾーンをサポートする。
zoneinfo依存のタイムゾーンは、Ruby1.8同様システムのタイムゾーン
だけサポートする。

これが、いいバランスだと思う。

▼時差の推測(Perlのアイデア)
y年m月d日w曜日の時差は
y'年m月d日w曜日と等しいと推測する

y'は2038年以前のなるべく未来の年を選ぶ
ただし、2月なら、y年とy'年は閏年かどうかも一致させる

64bit time_tの普及に伴って不要になっていくので、一時的なもの
未来の時差はもともと変化する可能性がある。(政府が勝手に変えるため）

▼夏時間
夏の間時差を変える
アメリカ(2007年)
  3月第2日曜日午前2時(標準時)から
　11月第1日曜日午前2時（夏時間)まで
　1時間進める

アメリカは４つの時間がある。

ヨーロッパ
　3月最終日曜日午前1時(UTC)から
　10月最終日午前1時(UTC)まで
　1時間進める

曜日が同じなら年を変えても同じになるので、これを予想して、時間を
操作する。

いろいろなルールがある。

▼時差が固定のタイムゾーン
過去も未来も時差が一定な仮想的なタイムゾーン
例 UTCは時差が0で一定なタイムゾーン

一つの時刻の時差を　特定の時刻の時差を表現するには十分
t1 = Time.new(2009,12,5,12)
p t1 #=> 2009-12-05 12:00:00 +0900　　akrさんのマシン
t2 = t1.getlocal(-8*60*60)
p t2 #=> 2009-12-04 19:00:00 -0800　　カリフォルニア周辺
ようするに、同じ時刻の違う時差が得られるようになる。

複数のタイムゾーンをサポートするアプリケーションでデータ構造
として利用できる。

▼夏時間のやっかいさ
存在しない時刻がある。
カリフォルニア
　2009年3月8日2時以降
　2009年3月8日3時未満
　例えば、02:30という時刻は存在しない
　この日付がきたときに、何が起るかわからない。
　夏時間をアプリケーションに定義しないので、detectするのが難しい。
　
年月日時分秒で時刻が同定できない
カリフォルニア
2009年11月1日1時以降
2009年11月1日2時未満
01:30は夏時間と標準時の両方は存在

日本に夏時間が導入されるとこういうことを考えて、プログラムを書かなければならない。

▼まとめ
　zoneinfoを持たない範囲で頑張っている
　zoneinfoの更新に巻き込まれない
　2038年問題を解決
　任意の固定時差を表現可能
　1秒未満は有理数を表現可能
　理不尽な制約をなるべくプログラマに見せない
　容易なプログラミングの実現

　夏時間がとても複雑だ。
　→ぜひ反対してほしい
　　対応することが社会的にはコストがかかってよくないだろう。

!! ライトニングトークス

!!! 「僕たちがSAMITを続ける理由(仮)」(hokkai7go & onodes - (LOCAL学生部 | SAMIT))
TODO:onodes担当

!!! 「東京〜とちぎ〜札幌」(vestige - toRuby)
栃木よりいらっしゃったよねざわさんによるtoRubyのビギンズナイト誕生のお話です。
よねざわさん自身のコミュニティとのつきあい方がよく伝わる内容だったのではない
でしょうか。そして、これからコミュニティ活動しようとしている人達にとって、
とても参考になるのではないでしょうか。
で、本題の前に、最初にtoRubyのテンプレートとなっている。[[dRubyによる分散・Webプログラミング|http://www.amazon.co.jp/dRuby%E3%81%AB%E3%82%88%E3%82%8B%E5%88%86%E6%95%A3%E3%83%BBWeb%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E9%96%A2-%E5%B0%86%E4%BF%8A/dp/4274066096]] の紹介がありましたw。  
そして、toRubyビギンズナイトの始まりまでを、自分のこれまでを振り返りを紹介してくださいました。
1990年の高校生のころは、数学同好会に入っていて、Basicで音楽をかいていた。1999年に就職してプログラマーとして働いていたが、JavaやRubyは知らなくて、最強のDSLであるCOBOLを触っていた。時は流れ、2004年にCOBOLからJavaへシフトしていき、この頃からオープンソースの世界へ入っていった。そして、スーパーな人達との出会いや勉強会もデビューした。2006年に転職して、東京から栃木へ移り、スーパープログラマーからの誘いがあり、一緒に仕事をすることになる。SEやリーダーやマネジメントの仕事をしていたが、プログラマーへ戻った。

そして、ここからtoRubyビギンズナイトが始まった。

ある時、咳さんから「勉強会の司会しみない？」の一言から、toRubyが始まったとのことです。現在、toRubyは36回を迎え、メンバーが15人くらいとなっています。よねざわさんは現在も司会を続けていらっしゃいるとのことです。toRubyを通じて不思議なスピンアウトな活動もされていました。このようにいろいろな事をしているうちに、参加する側から、場を作る側になっていき、何かわからない高揚感があり、不思議なシンパシーがあったりと楽しい毎日を送っているとのことでした。

!!! 「田舎Ruby親方で元エンドユーザの自分が目指すこと」(片平裕市 - Rails勉強会＠東北)
スライド
[[RubyKaigi2009|http://rubykaigi.org/2009/ja]]で開かれた田舎Ruby親方会議に参加された片平さんが、続「田舎Ruby親方会議」「儲かるRuby」という内容でお話されました。

田舎Ruby親方の定義　地方でRubyで仕事をしている個人事業者、小規模の法人経営者
なぜ田舎なのか？　生まれた場所が好きだからという理由です。
経歴的としては、元国立大学時職員、13年4ヵ月勤続、会計系事務（エンドユーザ）、
事務部門の情報部門をしていたそうです。で、独立するのきっかけは、
　2005.5にRuby(Rails)に触って惚れた！
　「これだー！俺はITというかRubyで人の役にたちたいんじゃー！」とやりたい事を見つけてしまった。
　ということから、red pillを選択して、2007年8月Rubyで独立されたそうです。
そして、独立して当初目指したことは、地方のあまりお金の出せない中小企業の特
にエンドユーザにITシステムを導入すること、 ITシステムを提供したお客さんが
もうけることで地域貢献ができるんじゃないか、 個人的には、IT屋さんはエンド
ユーザーだっときには、遠いイメージがあり、街の電機屋さんや工務店のように、
IT屋も「街のIT屋」みたいなものがあってもいいんじゃないかということを目指していた。
独立時は、田舎は直受け内製のチャンスが多いのではないか、金額が安くてもかき
集めればやっていけるのではないか？ということを思っていたが、現実は、仕事が
少なすぎるというか無かったり、周りを見渡すとほとんどが、東京依存で、結局東
京の仕事をやっていた。そしえ、自分が考えていたアプローチしたい層が予想以上
にお金もITに対する興味もないのがわかった。
結局、殆ど東京のRails案件をこなしていました。
と思惑通りに進まなかったので、作戦練り直すことにしました。当初目指した事が
それほど無謀だったとは思わないので、目指すことは変えない。
何が問題化というと、エンドユーザから何やっているかよくわからないと思われて
いるのが問題。つまり認知力が足りない。
そこで、自分の経験から、エンドユーザにもっとわかりやすい形を。パッケージや
サービス。例）MicroSoftOffice,ATOK,弥生会計など。を提供することを考えて
いるとのことです。

自分の強み　エンドユーザ、情報部門、IT業者を経験しているということを
生かして行きたい！ということでした。

!!! 「カーリングとRuby」(はしむかい としかつ - 妹背牛カーリング協会)
妹背牛からやってきたはしむかいとしかつさんのお話です。ちなみに妹背牛は
北海道の難読地方として有名ですが、なぜかカーリング場があります。
about
稲作農家で、月に一度札幌に米を配達しております。

先ほど、栃木の方が田舎と言っていたが、何をいっているだ！とおっしゃった
ところ、ここで、笑いの渦が起きましたw。

札幌で、学生の頃、22,3くらいまでプログラマーとして働いていたが、今は妹背牛で
カーリング協会でいろいろやっているとのことでした。今年強化委員長となり、
さらに、web担当となったが、一人しかいないので、「一人委員会」という
気の毒な愛称をつけられているそうです。
（ここで会場に笑いの渦が発生）

15世紀　スコットランドで発祥したらしい。ブリューゲルの写真で
カーリングをやっている。カーリングを習うと必ず1511と刻まれた
カーリングストーンというのが現存しているなかで、一番古いそうです。
通し番号かもしれません（笑い発生）

長野オリンピックで有名になったわけではなく、1924年シャモに第一回で
正式に認定されたそうです。

1977〜80年にかけて、北海道とカナダのアルバトロスとの文化交流の
一環として、道内21市町をまわりました。

カーリングはインターネット上でどう伝えられてきたか？
2006年　日本選手権　トリノ五輪のあとで盛り上がったときです。
2chで
小野寺ヒットアンドステイ
右中中
赤隠赤半赤黄
情報でういうと不可逆圧縮みたいなデータで伝えられていました。
そのうち2chで画像通信ができるようになり、会場の撮影などが
伝えられるようになったという歴史があったそうです。

次にカーリングの歴史から始まり、カーリングについてのお話が続き、突然
技術者といいますか、rubyistに変貌されました。

妹背牛カーリング協会の知り合いの方から、Webサイトを作らないか？という
話が持ちかけらた。
最初はブログサービスを検討したが、最終的にはマニアじゃない人にも最終的に
投稿してほしかったが、マークアップ言語がなかった。
そこで、tDiaryを使わせてもらいました。最初普通にやってプラグイン入れて
CSSを入れてみて、その後パッチを書いて、表にしたり、総当たりの結果を表示
できるようなパッチを当てた。tDiaryみたいに結果と突っ込みが同時にできる
サイトがなかったので、結構盛り上がったそうでしたが、最近プロバイダの
セルサービスが終了して、残念ながらなくなってしまったそうです。
で、今は、Sinatraベースでつくっている。ですが、ここで一言
「いっときますけど私、稲作農家です！」と力強い声でおっしゃりました（大笑い）
カーリングのコメントの他に棋符を見たいという要望があるので、flashとjson 
or yamlなどを使って作りたい！ゆくゆくはオープンソースにしたいとおっしゃって
ました。でもこういったものを作ろうとしたときに、サーバーがないので、
ぜひインフラ（サーバ）で協力をお願いしたいですとのことでした。

島田さんが「これはヤバイ！」「すごいすばらしいLT」でした。

!!! 「RubyとTwitterと私」(H.Hiro)
博士課程の大学院生で、RubyとTwitterが大好きというH.Hiroさんによる
Twitterを通して、自分が勉強できたRubyやプログラミング全般について
のお話です。まず、[[Twitter|http://twitter.com/]]とは「簡単に説明するのが難しい独特な
サービス」で、独り言を言うもよし、チャット的に使うもよし、そんな中
で色々な話題が生じるということをおっしゃってました。確かに説明するのが
難しいサービスなので、まだTwitter未経験の方は、まずは初めてみては
いかがでしょうか。

(1)BOT作りに乗り出した。
ここでは、作ることになった経緯や勉強して得られたことが述べられている。

nobotter
Rubyのリファレンスを読むのになれた。
net/http やjsonのライブラリの使い方がわかった。

(2)BOTを効率よく作るようになった
nobotterの成功後、他のユーザの発案を受けて他にもBOTを作り始めた。

当初はコードをコピペしてたけど、いい加減共通部分はまとめることにした。

リファクタリング

ライブラリかすればよいのではないか？

Application Framework
 以前は覚えることが多くて面倒だ...。今は、Application Framework
 ってよくある処理を簡略化してくれるから便利なのかな
と思うようになった。

考えを改めた
Railも触るようになった。

(3)おわりに
Twitterによってモチベーションが上がった
プログラム開発の方法を考え直すようになった
一番言いたいこと
Twitterのおかげで、Rubyによりいっそう打ち込めた。

!!! 「冬の札幌で、心温まるおしゃべりを。」(大和田純(june29) - Ruby札幌、サイジニア株式会社)
以前、Ruby札幌にて、活動されていた大和田さんによる。冬の札幌は寒いということと、本日は
スイーツタイムもあるので、暖かい飲み物をCocoaを飲みながら、皆さんとおしゃべり（Chat）
したいということで、今回は、RubyCocoa制のアプリケーションであるLimechatを通じて、遊んで
みたいので、お付き合いください。
Limechatはgithub上にあり、全てのソースコードを参照することができます。
その中にある、Rubyのコードのviewを作っているlog.rbを見てみると、ircの発言部分をとって、
rubyで処理して、文字列を作っている部分とか、DOMをにアクセスして、DOMのbodyに<div>を
作って入れるという処理があったりする。また、HTMLは文字列として書いてある。LimeChatの
メインウインドウは、大雑把委には、
<body>
<div>message</div>
<div>message</div>
<div>message</div>
</body>
という構成になっているのがわかります。ここまでは、Ruby,HTML,DOMの知識があれば、
ソースコードを読むことが出来ます。デスクトップアプリケーションだけど、Rubyの
コードが読めると、書き換えできそうだということで、今回はチャレンジしてみました。

ここからは、実際にbuildしたアプリのデモを見せてくださいました。
irc上のメッセージに、皆さんのアイコンを表示した状態になっており、Twitter風
に見せています。
マークアップとCSSを足して、テーマっぽくしてみました。皆さん発言内容を書き換える
だけではなく、ユーザのアイコンも取得する箇所もやっている。
これは、ユーザーアイコンを返すところは、localで動かしているSinatraから
取得しています。

http://localhost:XXXX/nick_nameでアクセスするとそのユーザーのアイコンを返
すようになっています。
アイコンの取得方法は泥作業でやっている。皆さんのアイコンを朝から
このアイコンだよとurlを教える部分は、朝から皆さんの顔を見て、この人はこのアイコンね
。という風にひたすら頑張って登録していました。とのことでした。
で、泥作業を通じて、リッチな体験、リッチなインターフェースを作って、皆さんと
ここで、暖かいお話ができるようになったのでしょうか？
ircなんだけど、アイコンが見えて楽しいのではないのでしょうか？

今日は、急遽darashiさんがdarabotというのを動かしていて、Twitterのハッシュタグ
を取り込んで、ここにPOSTする対応もircに入れるいれましたとのことでした。よって、
Twitterでしゃべった内容も表示するようになっています。とのことでした。

で、こうやって、Rubyのコードを読めたり、デスクトップアプリケーションを作ったり
今ある知識でいろいろ遊べて楽しかったです。とのことでした。

!!! 「動的HTMLスクレイピング対応並列分散クローラの紹介」(白土慧(kei-s) - Ruby札幌, サイジニア株式会社)
http://d.hatena.ne.jp/kei-s/20091214/1260802736

札幌出身の白土さんによる動的HTMLスクレイピング対応並列分散クローラについてのお話です。
このツールを作った理由が、沢山のWeb上のデータがほしいからです。何でかというと、それは
趣味だからです。
どうやって集めようかなと考えてみたところ、
WebのAPIとかHTMLのScrapingとかが、よくやるやりかた。
HTMLのScrapingをRubyで実装することを考えると、Mechanize & Nokogiriの
ライブラリをよく使います。だけど問題として、動的なHTMLな場合はどうするのだろう
ということが問題になります。例えば、Googleの画像検索の結果を取り込みたいなーと
考えたときに、実は、HTMLもソースを見ると。IMGタグを見てみると5つしかなかった。
どうやってやっているかというと、JavaScriptで後から動的にHTMLへ画像をはめ込んで
いるので、Nokogiriだけでは取得することができません。
そこで、今回はGreasiというクローラを作りました。始めにデモで、Googleの画像検索
から、北海道や札幌、スープカレー、ファイターズとかのクエリーで検索して、今リアル
タイムでクリーリングして、結果を吐き出しているところを見せてくれました。
システムの概要としては、サーバーがクライアントへURLを渡します。クライアントがWebページにアクセスしに
いってDOMを処理して、処理した結果を必要なデータをサーバに返すという仕組みです。
Serverに必要な条件は、データを受け取って、データを格納できることです。
今回選択たしたのは、HTTPのSinatra データベースのツールキットSequelを使いました。
気になるClient Sideに必要な条件ですが、必要なのは動的にHTMLをブラウザが解釈するように
解釈しなければならないことです。今回は、評価機としてFirefoxを使いました。
で、Greasi monkeyとJQueryをそのまま使いました。
どのように動作しているかというと、実は、今このPCでクローリングしていて、取ってきたら
そのままデータベースに投げる仕組みになっています。
Server Sideのコードスニペット紹介（Sinatraのコード片）
SinatraでPOSTのエンドポイントを置いて、そこにURLとデータを投げて行く仕組みになって
います。最後に次に取ってきたURLをPOSTのレスポンスに返すという仕組みになっている。
Client Sideのコードスニペット(jQuery)
Greasi monkey側では、Googleの画像検索のところで動くようにして、jQueryのGM_xmlhttpRequest
で、さっきのエンドポイントへデータをPOSTして、帰ってきたレスポンスをそのままlocation.hrefへ
突っ込んでことで、動作しています。
最後に、どのように並列化しているか？Firefoxのタブを増やせばよいです。
ということで、Firefoxをんストールすればいいです。WindowsでもMacでもLinuxでも動作しますし、
GUIのインストーラーもついてきます。
すごい分散のしかたでした。このアイデアはとてもおもしろいのではないでしょうか？

!!! 「ビュー層のキャッシュシステムにおける問題点とその解決策」(桑田誠)
Webアプリケーションにおけるキャッシュ

Railsで考えた場合のキャッシュの分類としては、Page cache、Action cache、Fragment cache
とありますが、本日は、HTMLページの一部のみをキャッシュするFragment cacheのお話をされました。
ページ全体をキャッシュする方法と比べると、手間はかかるけど、cacheを細かくコントロールできる
という利点があります。

 <% cache do %>
   <ul>
   <% @books.each do |book| %>
      <li><%= book.title %></li>
   <% end %>
   </ul>
 <% end %>

従来の方法だといくつか問題点があります。キャッシュを更新するときだけ必要なデータも毎回
DBにアクセスしなければなりません。

 def index
    ## @booksはキャッシュを更新するときにだけ必要なのに、毎回DBにアクセスしている
    @books = Book.find(:all :limit=>5)
 end
これは、キャッシュの有効・無効を調べる方法が用意されていないためです。

他には、無駄なデータベースアクセスを減らすために、テンプレートの中からModel層に直接
アクセスしているようなケースもある。この方法だと無駄なDBアクセスを減らせるが、代わりに
MVCの原則を破るという欠点があります。

 <% cache do %>
 <% @books = Book.find(:all,limit=>5) %>
   <ul>
   <% @books.each do |book| %>
      <li><%= book.title %></li>
   <% end %>
   </ul>
 <% end %>

問題の本質を明らかにする。従来の方法では、コントローラー側でコンテキストデータを用意
し、View層に渡すpush型でした。それに対し、キャッシュを考慮した場合は、キャッシュを更新
るときだけデータを取ってくる。言い変えると必要なデータを必要なときにだけとってくる。
pull型が望ましい。ということで、この問題は、pull型にすれば解決できるはずです。
解決案として、コールバック用のクロージャ（Proc）を遅延評価の一種として使う事にしました。
具体的なコードを見て行きたいと思います。

 def index
    @user = session[:user]
    ## コールバックオブジェクトを作成
    @books = proc {
        Book.find(:all, :limit=>5)
	#この時点でDBアクセスは発生していない
    }
    render 
 end

View側では、キャッシュを更新するときだけ、コールバックを呼び出してコンテキストデータの
取得をして、無駄なDBアクセスをなくします。
 <% cache do %>
   <ul>
   <%# キャッシュを更新するときだけ %>
   <%# コールバックを呼び出す %>
   <% @books.call.each do |book| %>
      <li><%=h book.title %></li>
   <% end %>
   </ul>
 <% end %>

利点
必要なデータを必要なときだけ用意、Viewでデータアクセスが不要、push型とpull型が混在可能
となります。
それから、この方法を利用して、[[merb用のプラグイン|http://github.com/kwatch/merb_piece_cache]]も作りましたとのことでしたので、ぜひ
利用してみてはいかがでしょうか。

!!! 「JRuby最新事情＠札幌」(高井直人 - Akasaka.rb)
高井さんはRubyist写真家と名乗ろうかと考えているようで、Rubyist写真家とは「動物写真家と同じ、Rubyistを撮る写真家」（ここで会場は笑いの渦に）高井さん自身は青函博のときに函館を訪問していることや、祖母が富良野出身とのことで北海道との縁をお話してくださいました．まずjRubyとは、Javaで実装されたRuby処理系で最新バージョンは1.4.0/MRI 1.8.7互換というもので、JavaのクラスをRubyで呼び出せるなど非常に面白いものです．Java統合機能、JavaHotSpotVMによる高い処理性能をもちます．
起動が遅いため現在あがっている高速化手法としては、スプラッシュウィンドウを表示し体感を速度を向上させる（会場笑いの渦）
Java統合機能としては、Javaのライブラリの呼び出しSwingの利用などがあげられる．
Javaへの埋め込みについてのお話でLT時間が終了となってしまいました．
Ruby,Javaを一緒に使える、速度もRuby1.8.7とjRuby1.4ではjRubyの方が速いとのことなので、Rubyに限らずjRuby、Rubyのその他の処理系も利用してみてはどうでしょうか

!!! 「そろそろカバレッジについてひとこと言っておくか - アンド・なう」(和田 卓人 - タワーズ・クエスト株式会社)

RubyConf09に言ってきて、空気を感じてきた和田さんのお話です。より良い設計とは何かとかそういことについて議論
していた様子を見たので、本日もそれをやってみたいです。
アジェンダ
TDDを殺すものは何かというと、それはSlow Testsです。これに対してどう立ち向かうか
というヒントを話しま。TDDと黄金の回転、リファクタリングが凄い大事。テストが遅くなる
ことによって、それが阻害されて回転速度が遅くなる。遅くなると、緩やかな死しか待って
いない。
これに立ち向かうには、xUNIT TEST PATTERNSという本の中に、テストに関わる問題に
ついてどうやって立ち向かって行くかという事が書かれている。
SlowTestsの原因はいろいろあるとのことでしたが、本日は、テストが多すぎるという
ことに対して、どう立ち向かうかをお話されました。まず、増え続けるテストと戦わな
ければならない、テストが増え続けていると効果が一定でほしかったのに、あとはメンテのコストが
増え続けていく。これに対して、一度に実行するテストの数を減すという手、テストにtagging(タグ)やcategorization
(カテゴリ)やannotationを与えて、特定に切り口で実行させるという手がある。そのタグとかカテゴリ
については、RSpec2.0で、いろいろやるよとデビットチェムスキーさんが言っています。
そもそも、テストの数が減らせないかということを考えている。

展望へ
テストは、もれなく、だぶりなく。これまでは、漏れがないことには注目していたが、重複したテストの検知
することができれば、テストの数を減らせるのではないか。重複を検知するためには、テストとコードの関係
明らかにする必要がある。それにカバレッジを使えないかを考えている。これまでのカバッレジは管理的な
側面が強い、そうではなくて、俺たちのカバレッジが必要。手にフィットするための。
リファクタリングを後押しするカバレッジとして、micro coverageという概念を考えてみます。
これまでのカバレッジは、コードベース全体で測定していたが、これは僕たちにフィットするものではない。
そうではなくて、小さい単位のテスト（自分たちでできる範囲で）カバレッジで測定して生かして行きたい。
ということで来年産学協同研究で、カバレッジに基づく重複テスト解析というものをやりたいと思っており、
その成果をまた札幌で発表したいとおっしゃてました。

!!! 「達人出版会について」(高橋征義 - 日本Rubyの会会長 / 株式会社ツインスパーク)

達人出版会のお話で、あまりRubyの話はありませんw。
本日は「達人出版会について」ということで、[[TokyuRuby会議|]]で発表された内容の続きと
いうことでお話されましたす。
まずは、そのあらすじです。Rubyistとしてよみたいものがたくさんある。例えば、「はじめての
Nokogiri」、「はじめてのhaml+sass」、「はじめてのWatir」、「はじめてのYARV」、
「はじめてのRainbows!」、「はじめてのJekyll」、「はじめてのMarkdown」とかいろいろ
読みたいんだけれど、残何な事にこれらは日本語で読むことができず、読むのが遅くなることで
困ってしまうので、それの解決策として、誰かにかいてもらって、PDFで売ること。
っていうふうなサービスを始めれたらいいんじゃないかということで、達人出版界を作りかけて
います。
名前の由来は達人プログラマーからとっている。PragmaticProgrammersがやっている
PragmaticBookshelfをリスペクトして作っています。
使う物としては、今のところPDFの処理で、Prawn(+Ruby),pdftkを使い、あとRails,PayPal
とかを使えばできるのではないかと考えている。
また、自由な文章も売りたい。とりあえずCC(CreativeCommons)な文書も販売したい。
CCなので、買った人はそれを再配布可能とします。そうすると誰も買ってくれないのではない
かという気がしますが、お布施的な意味での対価(書いてくれた人にありがとうという意味でお金
を払うという形にする）
で用意できればいいなと考えている。
ここから本題です。札幌でできること、情報発信がある。自分のことを振り返ってみると
北大の情報にいたときに、1995年ころに、北大推理研公式HPの作成をやっていた。そこで、
ミステリ関連のリンク集を作っていました。当時のネットミステリ読みにはリーチしていた
のではないかと思います。そのときは便利な仕組みがなくて大変だった。全部手書きとか
でやっていた。今ならblogで簡単にできるのではないかと思います。これだと簡単に無料で
見れるだけで、それとは違うかたちで　販売できるインフラが作れればいいなと思い今私が
やっています。
単純に情報発信をするだけではなく、さらにその先へ進みたい人は、　インフラそのものを作る。
とかやってみたらいいのではないでしょうか？　電子出版の場合は、海外ばかりでamazonnとか
ばかりで、日本では、ボイジャーが活躍している会社がある。社員数が10名くらいで頑張っているが
全体としてプレイヤーが少ない。その原因はビジネスとして難しい。そのへんはきにしなければ、
チャンスがありそう。必要なものは、手を挙げる勇気、手を挙げ続ける勇気、ただうまくいか
なかった場合は、手を下ろす覚悟も必要になるのかなと思います。
皆様にお願い
売りたい技術文書を募集中、自由に配布するライセンスも付けてもかまいません。
（CC可）
どうせやるなら、プレイヤーになってみる。あるいはインフラを作ってみる。
まとめ
高橋さんが好きなことばで、「世界はひとりの力で変えられるんです」（宇山日出臣）
これを思っていただければと思いますとのことでした。

!! プラットフォームワークショップ枠2
!!! 「高アクセス数のWEBサイトをRuby on Railsで構築、運用するためのTips基礎編」(沼田 一哉 - (株式会社エストコスモ | プラットフォームワークショップ))
概要
昨今、有名なWEBサイトでのRuby on Railsの利用例が多数報告されており、同時に、負荷に対する
パフォーマンスについての情報も頻繁に目にするようになりました。
今回はサーバ、アプリケーション双方の観点から、アクセス数の多い(もしくはこれから増やしたい)
WEBサイトをRuby on Railsで構築するために、これだけはやっておきたい基礎的なTipsを、講演者の経験を元にご紹介します。

タイトル改め、「ちょっとアクセスの多いサイトとRailsと私」に変更してお話されました。変更した理由は
動画を参照するとわかりますので、ぜひご覧になってください。
今日は、ロサンゼルス滞在中でのお仕事の経験を元にお話していただきました。沼田さんのお仕事はRailsやPHPの請負
開発をメインとし、コンサルから開発、サーバ導入と保守までと幅広くやっていたそうです。
滞在中に作成した一番大きなサイトというのは、Webサーバは一台で、毎秒平均ページビュー  10 req/s、最大ページビュー  70 req/s、頻繁に参照、
記録が行われるテーブルのレコード数　500,000という内容でした（WebサーバはApacheが前提です）

高トラフィックなRailsアプリを作る上で一番大切なのは、キャッシュと考えています。
cacheを積極的に利用することです。認証がなく、リアルタイム性がないコンテンツであれば、page cacheを使いましょう。
ここで大事なのは、リンクに.:format(.html)とする事が大切です。ページキャッシュなので、必ず静的ファイルが
作成されるので、Railsにリクエストが行かずに、Apache側で処理されるので、Railsの付加を下げることができます。
このような条件に合わない場合は、Action cache、fragment cache(キャッシュのstoreにはmemcached)などの粒度の小さいキャッシュを利用するといいと思います。次は、Webサーバのキャッシュ機能を活用することです。Railsまでは
アクセスさせずに、Apache側で処理させることです。
Apacheのmode_disk_cacheを有効活用する。注意点として、キャッシュのクリアには、htcachecleanを忘れずに
すること、また、mod_mem_cacheはExpire後の挙動があやしいので、使用していません。ベーシック認証をしている
場合はキャッシュが効かないので、別の方法を考える事。もう少し上の方法だとブラウザ鵜のキャッシュがあります。
更新の少ないコンテンツは、リクエストすら送らせないようにすることです。リクエストを送る時点で、Cache-Control
ヘッダ、Expireヘッダを付ける必要があるのですが、これはApacheのmod_expiresで設定できます。
次は，Load Balancingです。
高付加アクセスを作る前提なら、サーバを追加するだけでスケーリングできるように設計することです。リバースプロキシ
の導入することで、せっかくならキャッシュ機能が付いたものがいいので、apache + mod_proxy_balancerを使用
しています。作るときに気お付けてほしいのは、ファイルの入出力がある場合は、永続的なデータの共有が必要な場合
は、RESTfulを意識して、考えてみてください。
次は、Webへのリクエスト、RailsではなくDB/Strageのお話です。DBでできることはしっかりやることです。例えば
viewを使う（>=MySQL5）、インデックス、を使う事です。あるサイト構築で、30秒から1秒にすることができました。
また、find_by_xxxではなく、find_by_sql(・・・）で行うようにすること。DBのスケールで考えられる事。
MySQLクラスタは、マルチマスターで同期レプリケーションが可能だが、ノード台数が少ないとパフォーマンスが
かえって悪くなります。
プロキシ型だと、MySQL Proxy、pgpool、後はMySQLのレプリケーションがあります。これは非同期なので同期が
必要な場合は、使えないので運用に合わせてみてください。
次に、StorageのIOについてです。WebサーバのLoad AverageはCPU使用率だけでは決まらないことがある。実際
にはDiskのI/Oパフォーマンスの影響を受けていることが多い。よって、ファイル共有をしないといけない場合は、
DRBD+Heartbeat+NFSなどを使って複数の台数で運用できるようにする。後は、ハード側ではSAS+RAID10にする
とかFC+Diskアレイするとかありますが、コストと相談して決めるといいです。
次は、Railsでできる機能のについてです。
セッションを利用するときには、速度が遅いので、active_record_storeは使わないで、memcachedを利用する。
セッションには最低限必要な値のみ入れることにする。Rails2.3あたりからSessionのサイズが膨大になる傾向
があり、sessionの値を取得するだけでも膨大な時間がかかります。helperのlink_toを多様しないことなどです。
最後にWebサーバです。Dos攻撃の対応として、mod_evasiveを利用して、503 Service Temporary Unavailable
ヘッダを返すようにするこで、Railsの負荷を下げる。
あとは、passengerのPoolサイズです。高負荷をかけた状態で、passenger-statusコマンド、psコマンドを駆使
して、インスタンスの利用具合を確認して、PassengerMaxPoolSizeを変更して調整してみる。
最近のブラウザでは、一つのドメインに対して、同時コネクション数が制限されているので、画像データが多いサイト
を表示する場合は、どうしても表示が遅くなる傾向があるので、サブドメインを分ける事で、コンテンツを取得する
ことができます。この方法がyahooなどの大手サイトでも使われている手法です。
最後に、パフォーマンステストをしてからチューニングすること、パフォーマンスを上げるために、コードの変更
が必要になることがあるので、最初に必ずテストを書いておく事をお勧めします。あとは、monitで監視して、
万が一WEBサーバが停止していた場合は、自動再起動するようにしておくことが、最後の手段として用意しておくと
いいと思いますとのことでした。
また、High Performance Web Sitesはバイブル的な本として使えるので、高トラフィックサイトを構築する
必要のあるかたは、読んでみるといいですとおっしゃってました。

!! ビジネスセッション1
!!!「大学教員はレシピ先輩たりうるのか -- レシピ先輩製造機としての大学教員(仮)」(谷口 文威 - (Ruby札幌 / 北海道情報大学))
TODO:onodes

概要
＜log＞
大学のこうぎ
・90分持続しない
・ノートとらない
・基礎学力低下

研究者や教育者ではなく、catalysst(触媒）だと思う。

レシピ先輩
　一から教えない。とっかかりを与えてやってもらう。
　口を出さない。

キーワードは楽しい

学生に楽しいと思わせるにはどうすればよいか？
　・railsを使ってみた。→失敗した。

　　教え方がまずかった。
　　課題設定の曖昧さ
　　　教科書に沿ってやってるだけ
　　railsが呪文すぎた。ある程度の知識がないとだめだった。

結局楽しいということは？
　collaborative
　　議論が生まれる
　　役割分担
　　どうやって問題を解決するか
　　　googleで調べたときにどういうキーワードで調べたとかが重要。

　challenging
   興味のある課題でないと、やらされている感がある
　　トライ＆エラー
　　難易度の設定
　　　達成可能だと思える
　　　hello worldだと簡単すぎてNGなので、学生が達成可能な課題を設定するのが重要

　例）UNO

     ruby-state-machine
       ドキュメント皆無
　　　　シンプル
　　　　状態繊維の理解
　　　　だけならいいかも　
　　
みんな大好きdRuby
  タプルスペースだけ
　→これが学生に受け入れられやすい

Shoes
  GUIを簡単に作れる

まとめ
　catalyst

興味の持続にRubyという選択肢はアリだと思う。

課題
　楽しいの具現化
　ソースコードバージョン管理システムの利用
　共同作業の方向性のコントロール
　早いフィオードバックの実現

!! ビジネスセッション2
!!!「Ruby/Rails導入への道」(前田 智樹 - (Ruby札幌 / 株式会社アンタス))
TODO:おが

概要

・アンタスでのRuby歴のお話
・お客様の声

今日のおだいは、Rubyで仕事をできるようにするお話

一ヶ月前を表すコードをJavaとRubyで比較する

小さな実績作り
　本やWebを読んでしっかり勉強する
　実際に自分で何か作ってみる

その２
　本棚にRUbyを置く
　勉強会に参加する

その３
 tDiary
 Hiki
 影舞
 Redmine
 社内向け自作ツール

参考
　ごとけんさんの「仕事で使うRubyシリーズ」

実行
　

説得資料

!! ビジネスセッション3
!!! 「GitHub と Jekyll でつくる静的 Web サイト」(設樂 洋爾 - (Ruby札幌 / 株式会社えにしテック))
TODO:onodes

概要


!!! 「多様化するRubyの処理系の現在」発表者 笹田 耕一 - 日本Rubyの会 / 東京大学
TODO:onodes

概要
Rubyは様々な使われ方をしていますが，最近は様々なRuby処理系が提供されてきています．本発表では，そんな多様化するRuby処理系についてご紹介します．多分．

＜log＞
札幌で生で笹田さんのお話をきけるのはすばらしいことだ。
ということと、Rubyに関するいろいろな処理系のお話がありました
見たいにまとめることにする。


発表の設計ポリシー
　再利用可能性の追求

ささだ研のお話。

＊多様化するRuby処理系
　いっぱいある。

＊JRuby
  今勢いがある。Javaのバーチャルマシン用に最適化されている。
　これが火付け役になり、速度についての話があがってきている。

＊IronRuby
 .NET上で作られた処理系。silverlitgt。VisulaStudioの開発環境を帰ることができるようにすることなどを狙っている。

＊MacRuby
  Cocoaの仮想レイヤーを使って書いてある。MacOSXで実装されている。
　gitコンパイラ。AppleがLLVMを開発したり、使った入りしてコンパイルを早くしている。
　下のレイヤーがMacだったりするので、それに適した最適化をやりやすい。32bitと64bitのお話

元々ある言語の処理系をどれも再利用していることがわかる。

＊Cardinal
  
＊Rubinius
　そろそろXXXXをリリースする。音声で確認する。

　もの凄く早くなったらしいお話があった。
  
＊Sydney

＊DubySurinx
  
＊Phuby

ここにKeynoteのお話があった。

*ByteCodeRuby

＊YARB2LLVM YAJIT

＊Ruby1.8
 1.8.6,1.8.7,

*RUby1.9
 1.9.0,1.9.1,1.9.2

　最適化も終わっている。だいぶバグフィックスがおわってきたので、そろそろリリースする。

＊Ruby2.0

まとめ
*処理系にはいろんなのがあるので、選択肢が多い。
＊すきなものを使う
 
!!! 「Welcome to The Desert of The Real」(角谷 信太郎 - 日本Rubyの会 ||（株）永和システムマネジメント)
TODO:onodes

概要
札幌Ruby会議01の高橋さんのLT「札幌でRuby1.9を使うということ」から1年以上経過しましたが、みなさんお元気ですか？　引きつづき「世界が君を待ってい」ます。

＜log＞
Rubyistの向けのお話。
　ruby hackerとrubyistとの違い。

　赤いピルを飲むと今までと違う世界になる。

2008.10.25

世界とはMatrixだた。

Tim Brayのお話
　工場の部品になったような感じ。

Bruce A.Tate
 small temasで作る。

実際の生産性
　費用に対して、得られる効果が多い。
　少ないチームで開発する。少ない費用で開発できる。

merbとかやっている人のお話。

使う人にどうやって、

歩くRubyRevolution 2038年問題。

仕事？　大規模？

生産性？

安定、安心？

ドキュメントがないのはRubyの文化？
　コードを読みに行かせる。

コミュニティ？
　

栃木での某有料Ruby

全体では、そんなにコストがかわらない。

エンタープライズRubyの真実
→愛こそはすべて


Railsを使っているばかりではなくなってきている
　ちゃんとどれを使うかを考えていく必要があるところにきている？

Ruby wayなフレームワークにしていきたい。

rubyとrailsが仲良くできるよういsいたい
　→答えがない。


Rubyistの種類


コミュニケーションギャッップ
日本語と英語
RubyとRails
たのしいと勤勉

コミュニケーションギャップを埋める活動をしている。→asakusa.rb

Ruby1.9.21は良いリリースになると思う。


いつもお世話になっているRubyの開発に絡みたい

Ruby1.9&Rails

Ruby

Ruby2010について
　

自分なりにRubyに関わることが大切。
　→何もコードに関係する仕事だけではない。

このイベントにくるのも何かのきっかけになる。これもRubyに関わっている。


