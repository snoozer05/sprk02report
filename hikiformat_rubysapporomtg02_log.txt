
! Regional Ruby Kaigi レポート (13) 札幌 Ruby 会議 02

! はじめに

2009 年 12 月 5 日に、札幌で開催される地域 Ruby 会議として今年で 2 回目となる、札幌 Ruby 会議 02 が開催されました。
今回も[[前回|http://jp.rubyist.net/magazine/?0025-SapporoRubyKaigi01Report]]に引き続き、道外で活躍している方々もたくさん参加して頂きました。発表者の方ではなく純粋に札幌Ruby会議へ参加された方もいらっしゃいました。一時間ほどの懇親スイーツタイムでは道外の方々とも沢山お話することができ、「ここは本当に札幌なのだろうか!?」と思わせるような地域 Ruby 会議でした。

! 札幌 Ruby 会議 02 について
:'''開催日''':2009/12/5(土) 11:30 〜 18:30
:'''開催場所''':[[札幌市産業振興センター|http://sangyo.center.sec.or.jp/]]
:'''開催母体''':札幌Ruby会議02実行委員会, [[Ruby札幌|http://ruby-sapporo.org/]]
:'''協賛''':さっぽろ産業振興財団 高度情報通信人材育成事業 プラットフォームワークショップ
:'''後援''':[[日本Rubyの会|http://jp.rubyist.net/]], [[LOCAL|http://www.local.gr.jp/]]
:'''参加者''':当日会場を訪れた参加者数:およそ 112 名
:'''動画・資料''':[[公式ページ|http://regional.rubykaigi.org/sapporo02]]
:'''公式タグ''':sappororubykaigi02 ([[はてなブックマークでの検索結果|http://b.hatena.ne.jp/t/sappororubykaigi02]])
:'''公式ハッシュタグ''':#sprk02

! プログラム

!! Techセッション1
!!! 「tDiary annual report 2009」(柴田 博志(hsbt) - [[tDiary.org|http://www.tdiary.org/]])
札幌 Ruby 会議 01 に引き続き、tDiary プロジェクトのコミッタである柴田さんから、tDiary プロジェクトの現在についてのお話をいただきました。

まずはじめに、札幌 Ruby 会議 01 での発表後に新しく報告された tDiary の活用事例の紹介がありました。これは tDiary を業務日誌として活用するというもので、柴田さんも大変お薦めされていました。

次に、この一年間の活動についてのお話がありました。
まず大きな方針に関する話として、Ruby 1.9 対応に関する話がありました。tDiary プロジェクトでは「Ruby 1.9 はいつかは使わなければならないのだから、いち早く tDiary を Ruby 1.9 対応として利用者の Ruby 環境を 1.9 にアップグレードするよう誘導し、tDiary を Ruby 1.9 のキラーアプリにしよう」という方針のもとに活動が行われているということでした。
tDairy の開発状況については、2009 年 5 月 8 日にリリースを行い、現在の最新版は 2.3.2 となり、Ruby 1.9 にも対応しているとのことです。

Ruby 1.9 対応については大きく時間を割いて説明をされました。
最初に Ruby 1.9 で動かした際はエラーだらけで大変だったそうですが、その後行われた作戦会議などを経て、
* 過去バージョンとの非互換部分
* 文字エンコーディングの変更
について対応が行われたとのことです。
「過去バージョンとの非互換部分」については、compatible.rb というファイルを用意して、そこで非互換部分を吸収するようにしたそうです。是非このソースを読んで、既存のアプリを 1.9 対応する際の参考にしてくださいとのことでした。
「文字エンコーディングの変更」については、先頭に magic comment を一括指定して encoding を明示するようにしたそうです。また、外部エンコーディング指定については、RUBY_VERSIONを使用せずに Encoding:default_external を使用するようにしたそうです( 詳しくは [[RubyKaigi2009|TODO]] のスライド参照)。

Ruby 1.9 対応以外の開発項目については、
* 自動テストの仕組みを取り入れ
* CGI から Rack への載せ替え
* 機能追加と不具合修正
についての対応は完了しており、
* XML-RPC から Atom への移行
が未解決となっているとのことでした。

最後に、
* 2009 年も tDiary は Ruby と共に成長しました
* 2010 年もrubyととともに成長していく
* 『[[Rubyist に出来ること|http://jp.rubyist.net/magazine/?0027-WhatWeCanDo]]』をやるなら tDiary
ということで、レポートがまとめられました。

!! Techセッション2
!!! 「知らないと損をするSmalltalk」 (sumim - squeak-ja)
オブジェクト指向の本質、パターンとの関わり方、GUIの起源…。 日常のモヤモヤの中核にありながら語れる人が少ない Smalltalk について、Ruby 札幌のメンターでもある squeak-ja の sumim さんに解説していただきました。
お話の切り出しは「Smalltalk の t は小文字です」でした。最低限これを覚えて帰ってくださいとのことで、最近はこれを言い続けているので、ブログのタイトルもこれに変えてしまったそうです。

これに続き、Smalltalk を一見とっつきにくくしている４つのキーワード
* 古いのに新しい
* 言語ではなく環境
* シンプルなのに難解
* 知識よりも体験
に沿って、Smalltalk の解説がなされました。

まず最初のキーワードである「古いのに新しい」では、Smalltalkの歴史に始まり言語処理系としての特色などについてお話いただきました。
言語処理系としての一番大きな特色は「全てがオブジェクトである」ということで、Rubyと少し違うところは「ほぼ全てをメッセージングで実現している」ところであるということでした。
オブジェクト指向の考え方は「抽象データ型の OO (オブジェクト指向) 」と「メッセージング中心のOO」という二つに大きく分類でき、Smalltalk はアラン・ケイによってメッセージング中心の OO として考えられたとのことでした。
また、Smalltalk は Ruby にも多大な影響を与えているとのことで、「ブロック付きメソッド呼び出し」を取り上げ、Ruby と Smalltalk のコードがほとんど同じように記述できることを解説していただきました。
そして、より Smalltalk 側に寄った Ruby 処理系として「Rubinius」と「MagLev」、Smalltalk 発の Ruby 新機能として「Traits」と「Classboxes」についての紹介がありました。

OODB（オブジェクト指向データベース）である「MagLev」について、以下のデモを紹介してくださいました。
 1.MagLevのOODBサーバを起動
 2.maglev-irbを起動して、Maglev::PERSISTENT_ROOTへオブジェクトを追加
   Maglev::PERSISTENT_ROOT[:foo] = Object.new => #Object:0x9f66501
 3.このオブジェクトIDを確認
   Maglev::PERSISTENT_ROOT[:foo].object_id => 167142657
 4.このトランザクションをコミットして、maglev-irbを一度終了する
 5.新しいirbのインスタンスを立ち上げて、先ほどのオブジェクトIDを確認する
   Maglev::PERSISTENT_ROOT[:foo].object_id => 167142657
オブジェクトIDが同じ事が確認でき、処理系の外に保存されているということがわかります。

次のキーワード「言語ではなく環境」では、Smaltalk は言語だけではなく他の環境にも影響を及ぼしているとのことで、GUI の起源についてのお話がありました。
「現在の GUI の起源は Mac ではなく Smalltalk である」というお話で、Mac が起源と思われている右クリックメニューやコピー&ペースト、マルチフォントの取り込みなども、実は当時の Smalltalk にすでに実装されていたものだったという内容でした。
また、Smalltalk は NeXTSTEP の インターフェイスにも大きな影響を与えたとのことでした。

そして、３つめのキーワード「シンプルなのに難解」では、Smalltalk が、何故長期に渡って生きながらえ、他に影響を与え、新しい発想を育み続けられるのか、という謎について sumim さんが最近たどり着いたという考えが紹介されました。
その考えとは、Smalltalk と他の言語との違いが「利用者主体の斬新的成長が可能かどうか」という点にあるのではないかということで、他を人工都市、Smalltalk を自然都市になぞらえて、その考え方について説明がありました。この辺りの詳しい話は江渡浩一郎さんの『パターン、Wiki、XP』を参照してくださいとのことです。

最後のキーワードである「知識よりも体験」では、Smalltalk を理解するには知識よりも体験が重要であるとのことで、Smalltalk の文法や勉強方法についてのお話がありました。
文法については、リテラル( 6 種)、予約語、文法、メソッド定義テンプレートを覚えるだけで大丈夫とのことです。
ですが、なかなか本だけで学ぶことが難しいので、独学てはなく使い方がわかる人が居るところ(しかも少人数が望ましい)で学ぶことがいいでしょうとのことでした。

!! Techセッション3
!!! 「 Ruby で PostgreSQL とお話する方法」(石田 朗雄 - 株式会社サイクル・オブ・フィフス)
勉強会のスタイルが、「知らないことを、当日までに必死で調べて発表する」という石田さんが、 Ruby で PostgreSQL を操作するための Tips やその背景にある PostgreSQL インタフェースである libpq の機能についてお話ししてくれました。
Ruby と PostgreSQL と題して、始めに、「プログラムから SQL を実行するということ」についてのお話がありました。 PostgresSQL はクライアント／サーバーモデルになっているで、クライアントとサーバ間でのソケット通信があります。それは、 Frontend / Backend プロトコルと呼ばれていて、 PostgreSQL 標準のドキュメントにもプロトコルの説明があります。このようなプロトコルがあるのはいいのですが、 Ruby や Java から接続したいという場合に、これらのドライバを作る人が、プロトコルを実装するのが大変だということで、実際にこれらの言語から接続するドライバには二種類の実装が用意されています。そのうちの一つに、このプロトコルを実装してある C言語 のライブラリ libpq があるので、これを使って接続します。これを使えば実装で楽をすることができるようになります。
PostgreSQL に接続する場合、 Java の場合だと libpq を使わないで、 TYPE4 のドライバで実装をします。一方、 Ruby の場合はどうであるかというと、 libpq を使う場合と使わない場合の両方が存在します。 libpq を使用した実装が「ruby-postgres」で、 libpq を使用しないのが「postgres-pr」となっています。
2007 年の Ruby 勉強会@札幌の時点では、前者が「メンテされていない状態」、後者が「メソッドが少ない」状態でした。それぞれのDB接続関数 PGconn のインスタンスメソッドを比較したところ、 postgres-pr は6つしかなく、少なすぎるということをおっしゃってました。また、この発表直後に、 ruby-pg というライブラリ（ libpq を使用）が出たので確認してみたところ、 PGconn のインスタンスメソッドが非常に多くのメソッドが用意されていました（スライド一枚が埋まるくらい）。これは最強の Ruby の libpq ラッパーであるとおっしゃっていました。
尚、　ruby-pg　の使い方は、『 Ruby 逆引きレシピ』を参照くださいとのことでしたが、本日はレシピに存在しないお話をしてくくださいました。 ri のドキュメントを見ても引数に何を指定していいのかよくわからないという場合があります。例えば、 options とあるがいったい何のことなんだろうとかです。そのような時は、 libpq のラッパーであることに変わりはないので、 libpq のドキュメントを読むことが一番であるとおっしゃっていました。
最後に、 ruby-pg の便利な機能として、
* 非同期問い合わせ
* 非同期通知
* SQLSTATE のエラーコードを返す
* SSL サポート
などがありますので、一度 libpq のドキュメントを読んでみてほしいとのことでした。

!!! 「レシピに書かれていないこと」(須藤 功平 - 株式会社クリアコード)
Ruby札幌を応援している須藤さんより、 Ruby 逆引きレシピに載っている須藤プロダクツのうち、いくつかのレシピをライブコーディングにて、もっと掘り下げて紹介してくださいました。
お話の冒頭にて、プレゼンツールの Rabbit 、迷惑メール対策の milter manager (こちらは OSC2009 Hokkaido でお話されておりました)の紹介がありました。本日のスライドももちろん Rabbit で作成されておりました。最近、遂にまつもとさんが Rabbit ユーザになってくれましたとおっしゃってました。
札幌たいやきツアーのご紹介では、札幌市東区にある柳屋さんをご紹介されていました。ちなみにたいやき部はどなたでも参加可能とのことでしたので、須藤さんが好きな方、たいやきが好きな方は須藤さんへ連絡して、参加されてはどうでしょうか。
本日のライブコーディングの内容は、「レシピに書かれているもの」と「書かれている以外の使い方」でした。
前者については、レシピ 113 : ActiveLdap (るびまの ActiveLdap を使ってみようを参考）、レシピ 149 / 150 : RSS Parser、レシピ 155 : rcairo (るびまの cairo 2次元ライブラリを参考)で、後者については「groonga」、「Poppler」があるとのことでした。これらを利用し、ライブコーディングにて、ご紹介くださいました。
また、コードを書くと人が変わってしまうらしい須藤さんが、「口だじゃなく、コードを書け!」、「よいプログラマは自生しない」とおっしゃっていました。具体的に言うと、本の知識やデザインパターンを覚えるだけでは、その知識をどうやって使ったらいいかわからないということがありえるので、良いプログラマーにはなれないのではないかと思っています。ただコミットメールを見ているだけでは、コミットした状態はわかるが、そのコミットが、どのような過程でどのように問題を見つけて、どのように解決したとかが伝わらないと思っています。
では、どうすればいいかということで、ペアプログラミングなどで、他の人がどうやってコードを書いているかを見るなどをしていくことが大事だと思うので、それを日々実践してほしいと訴えていました。
この説明のあと、以下の技術を用いて、ライブコーディングを通して、何かを感じ取ってほしいとのことでした。
ライブコーディングのお題として、メールを全文検索するWebアプリケーションを作成されてきていて、これを「添付PDF内検索」、「添付PDFのサムネイル表示」できるように拡張するところのコーディングをされました。
利用ライブラリは、Sinatra(http://www.sinatrarb.com/intro-jp.html)、Haml(http://haml.ursm.jp/)、Ruby/groonga(全文検索エンジン)、
Mailを使用しています。
まず、PDF内の検索は、PDFからテキストを抽出することをirb上で、popplerを利用してテキストを抽出できることを確認して、Webアプリケーションのコードへ反映するコーディングされました。この時に、会場からは、「コーディングが早い」、「凄い」との声が聞こえてきました。次のサムネイル生成については、popplerとcairoを利用してサムネイル生成についてコーディングされました。
そして、ライブコーディングが終了したあとに、「レシピは役に立つよ！」ということでまとめられました。本日、須藤さんがお話しされたことやライブコーディングを通して、何か感じることができたのではないでしょうか。

!! プラットフォームワークショップ枠1
!!! 「Ruby における 2038年問題の解決」 (田中哲(akr) - 産総研)
Ruby1.9でどのように、Timeクラスを使用したときの2038年問題をどのように解決していったのかについてご紹介してくださいました。

Ruby1.9.2 では Time クラスの制約が緩和され、 2038 年以降も表現可能になり、 1901 年以前も表現可能となっています。Ruby1.8 はマイクロ秒までの表現でしたが、 Ruby1.9.2 では細かい制度で表現可能にしました。このように、任意の時差を表現可能にし、不合理な制約をなくして容易なプログラミングを実現しようというのが意図であるとおっしゃってました。
ではどのような時に、役立つのかを想定されるストーリーで考えてみます。 Ruby では、時刻を表現するのに普通 Time クラスを使います。アプリケーションで Time を使うことはよくあり、ほぼそれで動作します。ある時に、メールやデータベースから範囲外の時刻が届き、アプリケーションが動かないことがあります。そして、 Time を使うのが間違いだということが判明して大改修することになり、 Time の範囲が広ければよかったのにと思ってしまいます。
本日の内容は、このようなストーリーを実現した内容でした。
Unix 伝統の制約として、 time_t は 32bit 符号付き整数で、-2147483648〜2147483648　で表現可能となっており、これが 1970-01-01 00:00:00 UTC を起点とする秒数で、表現可能範囲が 1901-12-14〜2038-01-19 まで表現可能になっています。これが俗に 2038 年問題と言われています。
また、Ruby1.8はマイクロ秒単位でしたが、Ruby1.9.1はナノ秒単位で有理数を扱えるようになりました。 Time オブジェクト毎に表現を変えられるようにもなり、Ruby1.9ではいろいろな表現が可能になりましたとのことでした。
次は、自然の話、人間の話、技術の話のから、この問題に対する背景についてお話してくださいました。

自然(科学)の話では、時刻システムが、地球の自転や人間の暦の話について集積したところなので、以下のことに影響してきます。
地球の公転周期は自転周期の整数倍ではないことや自転周期は 1 秒の整数倍でないので、自転周期は一定でないことなどがあり、自然の問題は時刻を扱うのには難しい問題があります。

人間(暦)の話では、人間の要求として 12 月は（北半球で）冬であってほしい、一年という周期は季節のめぐりに一致してほしいとか
があります。例えば、春分の日は 3/20 か 3/21 であってほしいという社会的要求があります。ところが、公転周期は自転周期の非整数倍なので、太陽が地球を一周するときに、地球が何回回るかというと整数回ではなくて、約 365 回と 0.24...回 かかるます。もし整数倍であるなら一年が何日かを決めると、毎回一致しますが、実際はそうではないので、閏年（閏日 ２ 月 ２９ 日）で、一年の日数を調整しています。 
また、12 時は昼であってほしいという要求は。日本であろうが、ブラジルやアルゼンチンであろうが、12時は昼であってほしい、というような要求については、時差で調整（各国で決定）している。
そして、自転周期は秒の非整数倍、閏秒で1日の秒数を調整（国際機構で決定）、夏時間なども社会的要求としてあります。
これらの話に対し、システムではよく使われるところをサポートするようにできているとおっしゃってました。

技術的なお話では、
* 32bit time_t の制約(1901年〜2038年)
* struct tm の tm_year の制約(±21億年）
* 64 bit time_t の制約(±2922億年)
* タイムゾーン情報(夏時間、閏秒）の配布
* 単一プロセス内での複数のタイムゾーン
についてお話されました。
32bit time_t の制約により(1901年〜2038年)2038年問題が発生します。そして、time_t は 1970 から何秒経ったかを表す整数だが、それを何年、何月、何日、何時、何分、何秒という struct tm の tm_year フィールドの制約(±21億年）の問題が発生します。これをクリアすると 64bit time_t の制約(±2922億年)が発生する。これをクリアするとタイムゾーン情報(夏時間、閏秒）の配布します。ですが、暦の問題は各国で違うが、その情報がないと正しく時刻を処理できない。よって、タイムゾーンの情報をどこに持つべきかという問題が発生してくる。
こういう中で、Ruby という OS 上に乗っているアプリが、何をすれば幸せになれるかを紹介してくださいました。
Ruby 1.9 で扱う事は、Ruby 1.8 でできることと有理数を扱えるようにすることで、扱わない事は、相対論（位置や速度）、グレゴリオ歴以外の暦についてです。

難しい問題であるOSのサポート範囲外の時刻（2038年問題）を扱いたいだが、問題：時差・閏秒の情報が OS から取得することができない。また、複数のタイムゾーンも扱いたいが、時差の情報を取得することができません。つまり、 OS が時差・閏秒の情報を提供してくれないのが問題です。

では時差や閏秒の情報(zoneinfo)が、どこにあるかというと、UNIX では、例: /usr/share/zoneinfo/Asia/Tokyo などにあります。
ある地域における時差の時系列変化のデータは、各国の気まぐれで変化します。この対応は一般敵に OS ベンダがデータの更新を用意しています。
zoneinfo の問題として、このデータをどうするかが問題で、これをOSの範囲内で使うと、 time_t の範囲内しか得ることができないので、　32bit  符号付き time_t なら 2038 年問題が生じてしまいますし、 zoneinfo のファイルは沢山あるが、それぞれにアクセスするAPIが存在せず、基本的に単一のタイムゾーンしか扱えません。また、zoneinfo ファイル自体は OS に依存していて標準化されていない。
この状態でどうしたらよいかということを、 zoneinfo を自前で持つ( Java,PHP )ことを考えてみました。利点として、データを自前で持つので標準 API を無視して直接アクセスでき、 OS に依存することなくすべてのタイムゾーンの情報を安定して得られ、 time_t よりも広い範囲の情報を用意でき、複数のタイムゾーンもサポートできる事などが考えられます。欠点としては、 OS の更新に頼らずに自前でデータを更新しなければならないので、 OS が使っている zoneinfo と言語処理系に埋め込んだものと一致しないかもしれないという欠点がある。よって、 OS の zoneinfo で対応することにする。

OS の zoneinfo のみでどこまで対応できるかを考えてみると、 2038 年問題はPerlのアイデアを参考にして 2038 年以前の時差情報から推測することにします。複数のタイムゾーンについては、環境変数 TZ を変えるのが難しい問題がありますか、時差が固定(夏時間がない）の仮想的なタイムゾーンは扱えます。恐らく、これくらいが OS の zoneinfo を取り込まないで対応できる限界と考えます。

ruby 1.9.2 の選択ですが、 zoneinfoは 更新の問題があるので取り込まないことにし、 2038 年問題は Perl 同様に解決し、時差が固定のタイムゾーンをサポートする。 zoneinfo 依存のタイムゾーンは、 Ruby 1.8 と同様にシステムのタイムゾーンだけサポートすることにしました。
時差の推測については、Perlのアイデアと同じく、y 年 m 月 d 日 w 曜日の時差は y' 年 m 月 d 日 w 曜日と等しいと推測します。
y' は 2038 年以前のなるべく未来の年を選びます。ただし２月なら、y年とy'年は閏年かも一致させます。
続いて夏時間のお話がありました。
アメリカでは、 3 月第 2 日曜日午前 2 時(標準時)から 11 月第 1 日曜日午前 2 時（夏時間)まで 1 時間進めます。ヨーロッパでは、 3 月最終日曜日午前 1 時( UTC )から 10 月最終日午前 1 時( UTC )まで 1 時間進めます。このように曜日が同じなら年を変えても同じになるので、これを予想して、時間を操作します。

時差が固定のタイムゾーンについて、過去も未来も時差が一定な仮想的なタイムゾーンを考えます。例えば、 UTC は仮想的には時差が 0 で一定なタイムゾーンなので、一つの時刻の時差を表現するには十分です。
例えば、私のマシンでは、
t1 = Time.new( 2009,12,5,12 )
p t1 #=> 2009-12-05 12:00:00 +0900
という日本の時間になります。
カリフォルニア周辺では、
t2 = t1.getlocal( -8*60*60 )
p t2 #=> 2009-12-04 19:00:00 -0800
となり、同じ時刻の違う時差が得られるようになります。

最後に、存在しない時刻がある夏時間のやっかいさについて説明されました。
カリフォルニアでは、2009 年 3 月 8 日 2 時以降、 2009 年 3 月 8 日 3 時未満までの時間が存在しません。

例えば、02:30 という時刻は存在しないので、この日付がきたときには何が起るかが予測できません。夏時間をアプリケーションに定義しないので、 detect するのが難しい。また、年月日時分秒で時刻が同定できません。 2009 年 11 月 1 日 1 時以降 2009 年 11 月 1 日 2 時未満の間には、 01:30  は夏時間と標準時の両方に存在します。
よって、日本に夏時間が導入されるとこういうことを考えて、プログラムを書かなければななりません。
Ruby1.9の対応のまとめとして、
zoneinfoを持たない範囲で頑張っている
zoneinfoの更新に巻き込まれない
2038年問題を解決
任意の固定時差を表現可能
1秒未満は有理数を表現可能にし、理不尽な制約をなるべくプログラマに見せないようにし、容易なプログラミングの実現しています。
とのことでした。

!! ライトニングトークス

!!! 「僕たちがSAMITを続ける理由(仮)」(hokkai7go & onodes - (LOCAL学生部 | SAMIT))
TODO:onodes担当

!!! 「東京〜とちぎ〜札幌」(vestige - toRuby)
栃木よりいらっしゃった米澤さんによる toRuby のビギンズナイト誕生のお話です。
よねざわさん自身のコミュニティとのつきあい方がよく伝わる内容だったのではないでしょうか。そして、これからコミュニティ活動しようとしている人達にとって、とても参考になるのではないでしょうか。
そして、toRubyビギンズナイトの始まりを、自分のこれまでを振り返りを紹介してくださいました。
1990年の高校生のころは、数学同好会に入っていて、Basicで音楽を作っていました。1999年に就職してプログラマーとして働いていて、 Java や Ruby は知らず、最強の DSL である COBOL を触っていました。時は流れ、 2004 年に COBOL から Java へシフトしていき、この頃からオープンソースの世界へ入っていきました。そして、スーパーな人達との出会いや勉強会もデビューしました。 2006 年に転職して東京から栃木へ移り、スーパープログラマーからの誘いがあり、一緒に仕事をすることになる。 SE やリーダーやマネジメントの仕事をしていいましたが、再びプログラマーへ戻りました。
という振り返りのあとに、toRubyビギンズナイトのお話をされました。
ある時、咳さんから「勉強会の司会しみない？」の一言から、 toRuby が始まったとのことです。現在、 toRuby は36回を迎え、メンバーが15人くらいとなっています。 このようにいろいろな事をしているうちに、参加する側から、場を作る側になっていき、何かわからない高揚感があり、不思議なシンパシーがあったりと楽しい毎日を送っているとのことでした。

!!! 「田舎Ruby親方で元エンドユーザの自分が目指すこと」(片平裕市 - Rails勉強会＠東北)
スライド
[[RubyKaigi2009|http://rubykaigi.org/2009/ja]]で開かれた田舎Ruby親方会議に参加された片平さんが、続「田舎Ruby親方会議」「儲かるRuby」という内容でお話されました。

田舎Ruby親方の定義　地方でRubyで仕事をしている個人事業者、小規模の法人経営者
なぜ田舎なのか？　生まれた場所が好きだからという理由です。
経歴的としては、元国立大学時職員、13年4ヵ月勤続、会計系事務（エンドユーザ）、
事務部門の情報部門をしていたそうです。で、独立するのきっかけは、
　2005.5にRuby(Rails)に触って惚れた！
　「これだー！俺はITというかRubyで人の役にたちたいんじゃー！」とやりたい事を見つけてしまった。
　ということから、red pillを選択して、2007年8月Rubyで独立されたそうです。
そして、独立して当初目指したことは、地方のあまりお金の出せない中小企業の特
にエンドユーザにITシステムを導入すること、 ITシステムを提供したお客さんが
もうけることで地域貢献ができるんじゃないか、 個人的には、IT屋さんはエンド
ユーザーだっときには、遠いイメージがあり、街の電機屋さんや工務店のように、
IT屋も「街のIT屋」みたいなものがあってもいいんじゃないかということを目指していた。
独立時は、田舎は直受け内製のチャンスが多いのではないか、金額が安くてもかき
集めればやっていけるのではないか？ということを思っていたが、現実は、仕事が
少なすぎるというか無かったり、周りを見渡すとほとんどが、東京依存で、結局東
京の仕事をやっていた。そしえ、自分が考えていたアプローチしたい層が予想以上
にお金もITに対する興味もないのがわかった。
結局、殆ど東京のRails案件をこなしていました。
思惑通りに進まなかったので、作戦練り直すことにしました。当初目指した事が
それほど無謀だったとは思わないので、目指すことは変えない。
何が問題化というと、エンドユーザから何やっているかよくわからないと思われて
いるのが問題。つまり認知力が足りない。
そこで、自分の経験から、エンドユーザにもっとわかりやすい形を。パッケージや
サービス。例）MicroSoftOffice,ATOK,弥生会計など。を提供することを考えて
いるとのことです。

自分の強み　エンドユーザ、情報部門、IT業者を経験しているということを
生かして行きたい！ということでした。

!!! 「カーリングとRuby」(はしむかい としかつ - 妹背牛カーリング協会)
妹背牛からやってきた稲作農家のはしむかいとしかつさんのお話です。ちなみに妹背牛は
北海道の難読地方として有名ですが、なぜかカーリング場があるそうです。
先ほど、栃木の方が田舎と言っていたが、何をいっているんだ！とおっしゃった
ところで、笑いの渦が起きました。

札幌で、学生の頃、22,3くらいまでプログラマーとして働いていたが、今は妹背牛で
カーリング協会でいろいろやっているとのことでした。今年強化委員長となり、
さらに、web担当となったが、一人しかいないので、「一人委員会」という
気の毒な愛称をつけられているそうです。（ここで会場に笑いの渦）

15世紀　スコットランドで発祥したらしい。ブリューゲルの写真で
カーリングをやっている。カーリングを習うと必ず1511と刻まれた
カーリングストーンというのが現存しているなかで、一番古いそうです。
通し番号かもしれません（笑い発生）

長野オリンピックで有名になったわけではなく、1924年シャモに第一回で
正式に認定されたそうです。

1977〜80年にかけて、北海道とカナダのアルバトロスとの文化交流の
一環として、道内21市町をまわりました。

カーリングはインターネット上でどう伝えられてきたか？
2006年　日本選手権　トリノ五輪のあとで盛り上がったときです。
2chで
小野寺ヒットアンドステイ
右中中
赤隠赤半赤黄
情報でういうと不可逆圧縮みたいなデータで伝えられていました。
そのうち2chで画像通信ができるようになり、会場の撮影などが
伝えられるようになったという歴史があったそうです。

次にカーリングの歴史から始まり、カーリングについてのお話が続き、突然
技術者といいますか、rubyistに変貌されました。

妹背牛カーリング協会の知り合いの方から、Webサイトを作らないか？という
話が持ちかけらた。
最初はブログサービスを検討したが、最終的にはマニアじゃない人にも最終的に
投稿してほしかったが、マークアップ言語がなかった。
そこで、tDiaryを使わせてもらいました。最初普通にやってプラグイン入れて
CSSを入れてみて、その後パッチを書いて、表にしたり、総当たりの結果を表示
できるようなパッチを当てた。tDiaryみたいに結果と突っ込みが同時にできる
サイトがなかったので、結構盛り上がったそうでしたが、最近プロバイダの
セルサービスが終了して、残念ながらなくなってしまったそうです。
で、今は、Sinatraベースでつくっている。ですが、ここで一言
「いっときますけど私、稲作農家です！」と力強い声でおっしゃりました（大笑い）
カーリングのコメントの他に棋符を見たいという要望があるので、flashとjson 
or yamlなどを使って作りたい！ゆくゆくはオープンソースにしたいとおっしゃって
ました。でもこういったものを作ろうとしたときに、サーバーがないので、
ぜひインフラ（サーバ）で協力をお願いしたいですとのことでした。

!!! 「RubyとTwitterと私」(H.Hiro)
博士課程の大学院生で、RubyとTwitterが大好きというH.Hiroさんによる
Twitterを通して、自分が勉強できたRubyやプログラミング全般について
のお話です。まず、[[Twitter|http://twitter.com/]]とは「簡単に説明するのが難しい独特な
サービス」で、独り言を言うもよし、チャット的に使うもよし、そんな中
で色々な話題が生じるということをおっしゃってました。確かに説明するのが
難しいサービスなので、まだTwitter未経験の方は、まずは初めてみては
いかがでしょうか。

(1)BOT作りに乗り出した。
ここでは、作ることになった経緯や勉強して得られたことが述べられている。

nobotter
Rubyのリファレンスを読むのになれた。
net/http やjsonのライブラリの使い方がわかった。

(2)BOTを効率よく作るようになった
nobotterの成功後、他のユーザの発案を受けて他にもBOTを作り始めた。

当初はコードをコピペしてたけど、いい加減共通部分はまとめることにした。

リファクタリング

ライブラリかすればよいのではないか？

Application Framework
 以前は覚えることが多くて面倒だ...。今は、Application Framework
 ってよくある処理を簡略化してくれるから便利なのかな
と思うようになった。

考えを改めた
Railも触るようになった。

(3)おわりに
Twitterによってモチベーションが上がった
プログラム開発の方法を考え直すようになった
一番言いたいこと
Twitterのおかげで、Rubyによりいっそう打ち込めた。

!!! 「冬の札幌で、心温まるおしゃべりを。」(大和田純(june29) - Ruby札幌、サイジニア株式会社)
以前、Ruby札幌にて、活動されていた大和田さんによるお話です。
冬の札幌は寒いということと本日はスイーツタイムということで、暖かい飲み物を Cocoa を飲みながら、皆さんとおしゃべり（Chat）
したいということで、 RubyCocoa 制のアプリケーションである Limechat に手を加えたお話をされました。
Limechat は github 上にあり、全てのソースコードを参照することができます。
その中にある、 Ruby のコードの view を作っている log.rb を見てみると、 irc の発言部分を ruby で処理して文字列を作っている部分や DOM にアクセスして、 DOM の body に <div> を作成して挿入する処理があったりします。また、 HTML は文字列として書いてあり、 LimeChat のメインウインドウは大雑把に、
<body>
<div>message</div>
<div>message</div>
<div>message</div>
</body>
という構成になっているのがわかります。ここまでは、 Ruby , HTML , DOM の知識があれば、ソースコードを読むことが出来ます。デスクトップアプリケーションだけれどRuby のコードが読むことができると、書き換えできそうだということで、今回は手を加えることにチャレンジされたそうです。
ここからは、実際に build したアプリのデモを見せてくださいました。 irc 上のメッセージに、会場にいらっしゃる皆さんのアイコンを表示した状態になっており、 Twitter 風に見えていました。また、マークアップとCSSを足して、Twitterのテーマのような表示になっていました。そして、発言内容を書き換えるだけではなく、ユーザのアイコンも取得することもされていました。このユーザーアイコンを返すところは、 皆さんのアイコンを朝から皆さんの顔を見て、地道に頑張って集めて登録していたそうです。
このように、泥作業を通じてリッチな体験をして、リッチなインターフェースを作り、皆さんとここで暖かいお話ができ、ircだけれど、アイコンを見る事ができる、楽しいアプリケーションをご紹介してくださいました。

!!! 「動的HTMLスクレイピング対応並列分散クローラの紹介」(白土慧(kei-s) - Ruby札幌, サイジニア株式会社)
http://d.hatena.ne.jp/kei-s/20091214/1260802736

札幌出身の白土さんによる動的HTMLスクレイピング対応並列分散クローラについてのお話です。
このツールを作った理由が、沢山のWeb上のデータがほしいからです。何でかというと、それは
趣味だからです。
どうやって集めようかなと考えてみたところ、
WebのAPIとかHTMLのScrapingとかが、よくやるやりかた。
HTMLのScrapingをRubyで実装することを考えると、Mechanize & Nokogiriの
ライブラリをよく使います。だけど問題として、動的なHTMLな場合はどうするのだろう
ということが問題になります。例えば、Googleの画像検索の結果を取り込みたいなーと
考えたときに、実は、HTMLもソースを見ると。IMGタグを見てみると5つしかなかった。
どうやってやっているかというと、JavaScriptで後から動的にHTMLへ画像をはめ込んで
いるので、Nokogiriだけでは取得することができません。
そこで、今回はGreasiというクローラを作りました。始めにデモで、Googleの画像検索
から、北海道や札幌、スープカレー、ファイターズとかのクエリーで検索して、今リアル
タイムでクリーリングして、結果を吐き出しているところを見せてくれました。
システムの概要としては、サーバーがクライアントへURLを渡します。クライアントがWebページにアクセスしに
いってDOMを処理して、処理した結果を必要なデータをサーバに返すという仕組みです。
Serverに必要な条件は、データを受け取って、データを格納できることです。
今回選択たしたのは、HTTPのSinatra データベースのツールキットSequelを使いました。
気になるClient Sideに必要な条件ですが、必要なのは動的にHTMLをブラウザが解釈するように
解釈しなければならないことです。今回は、評価機としてFirefoxを使いました。
で、Greasi monkeyとJQueryをそのまま使いました。
どのように動作しているかというと、実は、今このPCでクローリングしていて、取ってきたら
そのままデータベースに投げる仕組みになっています。
Server Sideのコードスニペット紹介（Sinatraのコード片）
SinatraでPOSTのエンドポイントを置いて、そこにURLとデータを投げて行く仕組みになって
います。最後に次に取ってきたURLをPOSTのレスポンスに返すという仕組みになっている。
Client Sideのコードスニペット(jQuery)
Greasi monkey側では、Googleの画像検索のところで動くようにして、jQueryのGM_xmlhttpRequest
で、さっきのエンドポイントへデータをPOSTして、帰ってきたレスポンスをそのままlocation.hrefへ
突っ込んでことで、動作しています。
最後に、どのように並列化しているか？Firefoxのタブを増やせばよいです。
ということで、Firefoxをんストールすればいいです。WindowsでもMacでもLinuxでも動作しますし、
GUIのインストーラーもついてきます。
すごい分散のしかたでした。このアイデアはとてもおもしろいのではないでしょうか？

!!! 「ビュー層のキャッシュシステムにおける問題点とその解決策」(桑田誠)
Webアプリケーションにおけるキャッシュ

Railsで考えた場合のキャッシュの分類としては、Page cache、Action cache、Fragment cache
とありますが、本日は、HTMLページの一部のみをキャッシュするFragment cacheのお話をされました。
ページ全体をキャッシュする方法と比べると、手間はかかるけど、cacheを細かくコントロールできる
という利点があります。

 <% cache do %>
   <ul>
   <% @books.each do |book| %>
      <li><%= book.title %></li>
   <% end %>
   </ul>
 <% end %>

従来の方法だといくつか問題点があります。キャッシュを更新するときだけ必要なデータも毎回
DBにアクセスしなければなりません。

 def index
    ## @booksはキャッシュを更新するときにだけ必要なのに、毎回DBにアクセスしている
    @books = Book.find(:all :limit=>5)
 end
これは、キャッシュの有効・無効を調べる方法が用意されていないためです。

他には、無駄なデータベースアクセスを減らすために、テンプレートの中からModel層に直接
アクセスしているようなケースもある。この方法だと無駄なDBアクセスを減らせるが、代わりに
MVCの原則を破るという欠点があります。

 <% cache do %>
 <% @books = Book.find(:all,limit=>5) %>
   <ul>
   <% @books.each do |book| %>
      <li><%= book.title %></li>
   <% end %>
   </ul>
 <% end %>

問題の本質を明らかにする。従来の方法では、コントローラー側でコンテキストデータを用意
し、View層に渡すpush型でした。それに対し、キャッシュを考慮した場合は、キャッシュを更新
るときだけデータを取ってくる。言い変えると必要なデータを必要なときにだけとってくる。
pull型が望ましい。ということで、この問題は、pull型にすれば解決できるはずです。
解決案として、コールバック用のクロージャ（Proc）を遅延評価の一種として使う事にしました。
具体的なコードを見て行きたいと思います。

 def index
    @user = session[:user]
    ## コールバックオブジェクトを作成
    @books = proc {
        Book.find(:all, :limit=>5)
	#この時点でDBアクセスは発生していない
    }
    render 
 end

View側では、キャッシュを更新するときだけ、コールバックを呼び出してコンテキストデータの
取得をして、無駄なDBアクセスをなくします。
 <% cache do %>
   <ul>
   <%# キャッシュを更新するときだけ %>
   <%# コールバックを呼び出す %>
   <% @books.call.each do |book| %>
      <li><%=h book.title %></li>
   <% end %>
   </ul>
 <% end %>

利点
必要なデータを必要なときだけ用意、Viewでデータアクセスが不要、push型とpull型が混在可能
となります。
それから、この方法を利用して、[[merb用のプラグイン|http://github.com/kwatch/merb_piece_cache]]も作りましたとのことでしたので、ぜひ
利用してみてはいかがでしょうか。

!!! 「JRuby最新事情＠札幌」(高井直人 - Akasaka.rb)
高井さんはRubyist写真家と名乗ろうかと考えているようで、Rubyist写真家とは「動物写真家と同じ、Rubyistを撮る写真家」（ここで会場は笑いの渦に）高井さん自身は青函博のときに函館を訪問していることや、祖母が富良野出身とのことで北海道との縁をお話してくださいました．まずjRubyとは、Javaで実装されたRuby処理系で最新バージョンは1.4.0/MRI 1.8.7互換というもので、JavaのクラスをRubyで呼び出せるなど非常に面白いものです．Java統合機能、JavaHotSpotVMによる高い処理性能をもちます．
起動が遅いため現在あがっている高速化手法としては、スプラッシュウィンドウを表示し体感を速度を向上させる（会場笑いの渦）
Java統合機能としては、Javaのライブラリの呼び出しSwingの利用などがあげられる．
Javaへの埋め込みについてのお話でLT時間が終了となってしまいました．
Ruby,Javaを一緒に使える、速度もRuby1.8.7とjRuby1.4ではjRubyの方が速いとのことなので、Rubyに限らずjRuby、Rubyのその他の処理系も利用してみてはどうでしょうか

!!! 「そろそろカバレッジについてひとこと言っておくか - アンド・なう」(和田 卓人 - タワーズ・クエスト株式会社)

RubyConf09に言ってきて、空気を感じてきた和田さんのお話です。より良い設計とは何かとかそういことについて議論
していた様子を見たので、本日もそれをやってみたいです。
アジェンダ
TDDを殺すものは何かというと、それはSlow Testsです。これに対してどう立ち向かうか
というヒントを話しま。TDDと黄金の回転、リファクタリングが凄い大事。テストが遅くなる
ことによって、それが阻害されて回転速度が遅くなる。遅くなると、緩やかな死しか待って
いない。
これに立ち向かうには、xUNIT TEST PATTERNSという本の中に、テストに関わる問題に
ついてどうやって立ち向かって行くかという事が書かれている。
SlowTestsの原因はいろいろあるとのことでしたが、本日は、テストが多すぎるという
ことに対して、どう立ち向かうかをお話されました。まず、増え続けるテストと戦わな
ければならない、テストが増え続けていると効果が一定でほしかったのに、あとはメンテのコストが
増え続けていく。これに対して、一度に実行するテストの数を減すという手、テストにtagging(タグ)やcategorization
(カテゴリ)やannotationを与えて、特定に切り口で実行させるという手がある。そのタグとかカテゴリ
については、RSpec2.0で、いろいろやるよとデビットチェムスキーさんが言っています。
そもそも、テストの数が減らせないかということを考えている。

展望へ
テストは、もれなく、だぶりなく。これまでは、漏れがないことには注目していたが、重複したテストの検知
することができれば、テストの数を減らせるのではないか。重複を検知するためには、テストとコードの関係
明らかにする必要がある。それにカバレッジを使えないかを考えている。これまでのカバッレジは管理的な
側面が強い、そうではなくて、俺たちのカバレッジが必要。手にフィットするための。
リファクタリングを後押しするカバレッジとして、micro coverageという概念を考えてみます。
これまでのカバレッジは、コードベース全体で測定していたが、これは僕たちにフィットするものではない。
そうではなくて、小さい単位のテスト（自分たちでできる範囲で）カバレッジで測定して生かして行きたい。
ということで来年産学協同研究で、カバレッジに基づく重複テスト解析というものをやりたいと思っており、
その成果をまた札幌で発表したいとおっしゃてました。

!!! 「達人出版会について」(高橋征義 - 日本Rubyの会会長 / 株式会社ツインスパーク)

達人出版会のお話で、あまりRubyの話はありませんw。
本日は「達人出版会について」ということで、[[TokyuRuby会議|]]で発表された内容の続きと
いうことでお話されましたす。
まずは、そのあらすじです。Rubyistとしてよみたいものがたくさんある。例えば、「はじめての
Nokogiri」、「はじめてのhaml+sass」、「はじめてのWatir」、「はじめてのYARV」、
「はじめてのRainbows!」、「はじめてのJekyll」、「はじめてのMarkdown」とかいろいろ
読みたいんだけれど、残何な事にこれらは日本語で読むことができず、読むのが遅くなることで
困ってしまうので、それの解決策として、誰かにかいてもらって、PDFで売ること。
っていうふうなサービスを始めれたらいいんじゃないかということで、達人出版界を作りかけて
います。
名前の由来は達人プログラマーからとっている。PragmaticProgrammersがやっている
PragmaticBookshelfをリスペクトして作っています。
使う物としては、今のところPDFの処理で、Prawn(+Ruby),pdftkを使い、あとRails,PayPal
とかを使えばできるのではないかと考えている。
また、自由な文章も売りたい。とりあえずCC(CreativeCommons)な文書も販売したい。
CCなので、買った人はそれを再配布可能とします。そうすると誰も買ってくれないのではない
かという気がしますが、お布施的な意味での対価(書いてくれた人にありがとうという意味でお金
を払うという形にする）
で用意できればいいなと考えている。
ここから本題です。札幌でできること、情報発信がある。自分のことを振り返ってみると
北大の情報にいたときに、1995年ころに、北大推理研公式HPの作成をやっていた。そこで、
ミステリ関連のリンク集を作っていました。当時のネットミステリ読みにはリーチしていた
のではないかと思います。そのときは便利な仕組みがなくて大変だった。全部手書きとか
でやっていた。今ならblogで簡単にできるのではないかと思います。これだと簡単に無料で
見れるだけで、それとは違うかたちで　販売できるインフラが作れればいいなと思い今私が
やっています。
単純に情報発信をするだけではなく、さらにその先へ進みたい人は、　インフラそのものを作る。
とかやってみたらいいのではないでしょうか？　電子出版の場合は、海外ばかりでamazonnとか
ばかりで、日本では、ボイジャーが活躍している会社がある。社員数が10名くらいで頑張っているが
全体としてプレイヤーが少ない。その原因はビジネスとして難しい。そのへんはきにしなければ、
チャンスがありそう。必要なものは、手を挙げる勇気、手を挙げ続ける勇気、ただうまくいか
なかった場合は、手を下ろす覚悟も必要になるのかなと思います。
皆様にお願い
売りたい技術文書を募集中、自由に配布するライセンスも付けてもかまいません。
（CC可）
どうせやるなら、プレイヤーになってみる。あるいはインフラを作ってみる。
まとめ
高橋さんが好きなことばで、「世界はひとりの力で変えられるんです」（宇山日出臣）
これを思っていただければと思いますとのことでした。

!! プラットフォームワークショップ枠2
!!! 「高アクセス数のWEBサイトをRuby on Railsで構築、運用するためのTips基礎編」(沼田 一哉 - (株式会社エストコスモ | プラットフォームワークショップ))
概要
昨今、有名なWEBサイトでのRuby on Railsの利用例が多数報告されており、同時に、負荷に対する
パフォーマンスについての情報も頻繁に目にするようになりました。
今回はサーバ、アプリケーション双方の観点から、アクセス数の多い(もしくはこれから増やしたい)
WEBサイトをRuby on Railsで構築するために、これだけはやっておきたい基礎的なTipsを、講演者の経験を元にご紹介します。

タイトル改め、「ちょっとアクセスの多いサイトとRailsと私」に変更してお話されました。変更した理由は
動画を参照するとわかりますので、ぜひご覧になってください。
今日は、ロサンゼルス滞在中でのお仕事の経験を元にお話していただきました。沼田さんのお仕事はRailsやPHPの請負
開発をメインとし、コンサルから開発、サーバ導入と保守までと幅広くやっていたそうです。
滞在中に作成した一番大きなサイトというのは、Webサーバは一台で、毎秒平均ページビュー  10 req/s、最大ページビュー  70 req/s、頻繁に参照、
記録が行われるテーブルのレコード数　500,000という内容でした（WebサーバはApacheが前提です）

高トラフィックなRailsアプリを作る上で一番大切なのは、キャッシュと考えています。
cacheを積極的に利用することです。認証がなく、リアルタイム性がないコンテンツであれば、page cacheを使いましょう。
ここで大事なのは、リンクに.:format(.html)とする事が大切です。ページキャッシュなので、必ず静的ファイルが
作成されるので、Railsにリクエストが行かずに、Apache側で処理されるので、Railsの付加を下げることができます。
このような条件に合わない場合は、Action cache、fragment cache(キャッシュのstoreにはmemcached)などの粒度の小さいキャッシュを利用するといいと思います。次は、Webサーバのキャッシュ機能を活用することです。Railsまでは
アクセスさせずに、Apache側で処理させることです。
Apacheのmode_disk_cacheを有効活用する。注意点として、キャッシュのクリアには、htcachecleanを忘れずに
すること、また、mod_mem_cacheはExpire後の挙動があやしいので、使用していません。ベーシック認証をしている
場合はキャッシュが効かないので、別の方法を考える事。もう少し上の方法だとブラウザ鵜のキャッシュがあります。
更新の少ないコンテンツは、リクエストすら送らせないようにすることです。リクエストを送る時点で、Cache-Control
ヘッダ、Expireヘッダを付ける必要があるのですが、これはApacheのmod_expiresで設定できます。
次は，Load Balancingです。
高付加アクセスを作る前提なら、サーバを追加するだけでスケーリングできるように設計することです。リバースプロキシ
の導入することで、せっかくならキャッシュ機能が付いたものがいいので、apache + mod_proxy_balancerを使用
しています。作るときに気お付けてほしいのは、ファイルの入出力がある場合は、永続的なデータの共有が必要な場合
は、RESTfulを意識して、考えてみてください。
次は、Webへのリクエスト、RailsではなくDB/Strageのお話です。DBでできることはしっかりやることです。例えば
viewを使う（>=MySQL5）、インデックス、を使う事です。あるサイト構築で、30秒から1秒にすることができました。
また、find_by_xxxではなく、find_by_sql(・・・）で行うようにすること。DBのスケールで考えられる事。
MySQLクラスタは、マルチマスターで同期レプリケーションが可能だが、ノード台数が少ないとパフォーマンスが
かえって悪くなります。
プロキシ型だと、MySQL Proxy、pgpool、後はMySQLのレプリケーションがあります。これは非同期なので同期が
必要な場合は、使えないので運用に合わせてみてください。
次に、StorageのIOについてです。WebサーバのLoad AverageはCPU使用率だけでは決まらないことがある。実際
にはDiskのI/Oパフォーマンスの影響を受けていることが多い。よって、ファイル共有をしないといけない場合は、
DRBD+Heartbeat+NFSなどを使って複数の台数で運用できるようにする。後は、ハード側ではSAS+RAID10にする
とかFC+Diskアレイするとかありますが、コストと相談して決めるといいです。
次は、Railsでできる機能のについてです。
セッションを利用するときには、速度が遅いので、active_record_storeは使わないで、memcachedを利用する。
セッションには最低限必要な値のみ入れることにする。Rails2.3あたりからSessionのサイズが膨大になる傾向
があり、sessionの値を取得するだけでも膨大な時間がかかります。helperのlink_toを多様しないことなどです。
最後にWebサーバです。Dos攻撃の対応として、mod_evasiveを利用して、503 Service Temporary Unavailable
ヘッダを返すようにするこで、Railsの負荷を下げる。
あとは、passengerのPoolサイズです。高負荷をかけた状態で、passenger-statusコマンド、psコマンドを駆使
して、インスタンスの利用具合を確認して、PassengerMaxPoolSizeを変更して調整してみる。
最近のブラウザでは、一つのドメインに対して、同時コネクション数が制限されているので、画像データが多いサイト
を表示する場合は、どうしても表示が遅くなる傾向があるので、サブドメインを分ける事で、コンテンツを取得する
ことができます。この方法がyahooなどの大手サイトでも使われている手法です。
最後に、パフォーマンステストをしてからチューニングすること、パフォーマンスを上げるために、コードの変更
が必要になることがあるので、最初に必ずテストを書いておく事をお勧めします。あとは、monitで監視して、
万が一WEBサーバが停止していた場合は、自動再起動するようにしておくことが、最後の手段として用意しておくと
いいと思いますとのことでした。
また、High Performance Web Sitesはバイブル的な本として使えるので、高トラフィックサイトを構築する
必要のあるかたは、読んでみるといいですとおっしゃってました。

!! ビジネスセッション1
!!!「大学教員はレシピ先輩たりうるのか -- レシピ先輩製造機としての大学教員(仮)」(谷口 文威 - (Ruby札幌 / 北海道情報大学))

概要
大学教員である谷口さんが、授業を通しての「楽しいとは」についてでした．
集中力が持続しない学生に対して谷口さんのキーワード「楽しい」．学生を楽しいと思わせるにはどうすれば良いのかと考えRubyonRailsを授業に使用してみたところ「失敗」をしたとのこと、何故なら「教科書に沿ってやるだけ」「Railsが呪文すぎて、ある程度の知識がないと駄目だった」そうです．

そこで結局楽しいとは「collaborative」と「challenging」ではないかと考える．
collaborativeつまり複数人で行うことで議論が生まれ役割分担も発生してくる．
challengingは興味のある課題でなければやらされている感があるため到達可能だと思わせる課題設定が必要である．
そこでdRubyやShoesなど学生に受け入れられやすいもの、簡単にGUIを作れるものを利用することで「楽しい」を実現しようとしたとのことです．
最後に興味の持続にRubyという選択肢はありではないだろうかとのことでした．

!! ビジネスセッション2
!!!「Ruby/Rails導入への道」(前田 智樹 - (Ruby札幌 / 株式会社アンタス))
Rubyが大好きだから、Rubyで仕事をしたい！でも会社では導入できていないという人達のためのお話をされました。はじめに、アンタスでのRuby歴についてお話しがありました。2006年は一つのプロジェクト（前田さんがRubyでやるといって導入されたそうです）だけでしたが、2009年になると社内の約半分のプロジェクトがRubyもしくはRailsで開発しているとのことでした。
今日は、Rubyで開発できてない人を、なんとか開発できるようにもっていきたいというお話なのですが、その前に、Rubyについてはよくわからないという方をよくわかる感じにしていきたいということで、一ヶ月前を表すコード例をJavaとRubyで比較したお話がありました。
Javaだと
new Date(new Date().getTime()-1000*60*60*24*30);
となり、Javaはメソッド呼び出しに括弧が必要だったり、最後にセミコロンが必要だったりしますが、
Rubyでは
1.month.ago
と簡潔に書く事ができます。
さらに凄いのが、この機能が言語に最初から組み込まれているわけではなく、ライブラリの読み込みによって可能になります。この例ではrequire 'activesupport'とすることで、1.month.agoと書く事ができるようになります。
Rubyの良さとして、やりたいことをそのまま必要最小限のコードにできる（高い生産性）ことや柔軟（フレームワークの外へも抜け出しやすい）なことがあると思います。また、これ以上Rubyの良さを語りだすと止まらなくなるので、過去に話したことは、
http://www.slideshare.net/tmaedaにあるので、こちらを読んでみてくださいとのことでした。Rubyについてよく知らない方へのお話が終わったところで、本題のお話がありました。
まず、小さな要求を承諾してもらった後は、より大きな要求も承諾してもらいやすいということで、一つ目の実績作りとして、本やWebを読んでしっかり勉強して、実際に自分で何か作ってみる。二つ目の実績作りは、本棚にRubyの書籍を置いてみたりして他の人へアピールすることやRubyの勉強会に参加し、参加したことを何気なく社内で話したり、レポートを書いたりする。最後に、Ruby製のTool（tDaiary,Hiki,影舞、Redmineなど）を導入して、みんなに使ってもらうことです。これらのToolにはPowerd by Ruby1.8.7とか書いてあるので、Rubyという言葉がよく見えるようになりますとおっしゃっていました。
この辺の話は、ごとけんさんの「仕事で使うRubyシリーズ」が参考になるので、Ruby会議で発表されている資料を一度見てみてくださいとのことでした。Wikiに関して言うと、江渡さんの「パターン、Wiki、XP」がとても参考になりますとのことです。
ここまできたら、あとは実行に移すだけです。みんなRubyっていうものに対して、「何それ」という認識がなくなっているはずです。
小さな会社なら簡単で、もう十分に実績ができているので、「今回のプロジェクトではRubyを使ってみましょう!」と言うだけです。
大きな会社の場合は、上司が厳しい場合は、いろいろな情報を駆使して説得するしかないです。この辺は、2008年のRuby会議での発表にあった大場さんや高井さんのを参考にしてみてくださいとのことでした。
あと上司への説得材料として、楽天におけるRuby導入の取り組みについてを使用するといい。
また、Railで作られているサービス（twitter,COOKPAD,食べログ）など。

今日お話された内容は、まさに前田さんが実際に実行されたことだと思いますので、ぜひ皆さんも参考にされてはどうでしょうか。


!! ビジネスセッション3
!!! 「GitHub と Jekyll でつくる静的 Web サイト」(設樂 洋爾 - (Ruby札幌 / 株式会社えにしテック))
TODO:onodes
Ruby札幌運営チームであり、スープカレーが大好きだと言う設樂さん．スープカレーを今すぐ食べたい！と思ったときにスープカレー屋を調べることが出来るというsoupcurry.infoを運営している．soupcurry.infoは携帯電話にも対応しており、GPSを使って最寄りのスープカレー屋を調べることも可能で、このときに使用した携帯電話のための部分を切り出しjpmobileという形で公開している．またTwitter関連のwebサービスbuzztterも設樂さんが運営しているとのこと．
本題ではエンタープライズでwebサイトを作るというとcollaborationやworkflow、変更記録とかが重要となってくる．時々リニューアルやキャンペーンをしたり、セキュリティも必要となる．またBackupやScalabilityなどが要求されてくる．大規模であればそれなりのCMSが必要となってくるが、小規模の場合はGithubで対応できる．もう１つ話の中で重要なものはRubyで書かれているJekyllである．TextをJelyllを用いることによりwebサイトに変化を遂げてしまう．
　githubを経由することにより複数人の開発がスムーズに行われることでcollaborationやworkflowが解決され、さらにgitなので変更記録も取られている．キャンペーンやリニューアルの際にはgitなのでbranchを切ればいいとのこと．バックアップに関しては静的なファイルであるため、cloneすればバックアップが可能であるとのこと．セキュリティについては不必要に動的ではないため動的なサイトに比べると安全である．手元にファイルがあるため簡単にDeployが可能でり、Githubにあるgithub pagesを使うのも簡単で良いとのこと．



概要


!!! 「多様化するRubyの処理系の現在」発表者 笹田 耕一 - 日本Rubyの会 / 東京大学
TODO:onodes

概要
Rubyは様々な使われ方をしていますが，最近は様々なRuby処理系が提供されてきています．本発表では，そんな多様化するRuby処理系についてご紹介します．多分．

YARVの開発者笹田さんのお話です．まずは笹田さんの研究室である「ささだ研」の紹介から始まり多様化するRubyの処理系と題しまして、色々な処理系の紹介へと進みました．
まずjRubyは現在勢いがある処理系でJavaVM用に最適化されている．このJRubyが火付け役となり、速度についての話となってきている．IronRubyは.Net上で作られた処理系でsilverlight上で非常によく動いてるとされ、web上のプログラムが容易となる．
MacRubyはMacOSXがもっているCocoaと呼ばれる仮想レイヤーを直接叩いている．StringなどMacOSXが始めからサポートしているものを使用している．また当初は笹田さんが開発されているYARVを採用予定であったが、全く作り替えたとのこと．JITコンパイラを用いてRubyコードをネイティブコードに落とす際AppleなどがLLVMと呼ばれるJITコンパイルを行う動的なコンパイルフレームワークを作っている．MacRubyはLLVMを実際に用いることで実際に速くなっている．JavaVM、.NetFramework、MacOSXなどターゲットを絞った処理系のため最適化が行いやすい処理系である．その他にもRubinius,Sydney,DubySurinx,Phuby,ByteCodeRuby,YARV2LLVM,YAJIT,Ruby1.8,Ruby1.9のご紹介をされ、最後にRuby2.0はRuby1.9.2がリリースされるとまつもとさんが考えるらしいとのこと．まとめとしてはRuby処理系には色々な選択肢があり好きなものを使うといいとのこと、プロジェクトでJavaならJRubyなどそのように使い分けてとのことです．




   
!!! 「Welcome to The Desert of The Real」(角谷 信太郎 - 日本Rubyの会 ||（株）永和システムマネジメント)
TODO:onodes

概要
札幌Ruby会議01の高橋さんのLT「札幌でRuby1.9を使うということ」から1年以上経過しましたが、みなさんお元気ですか？　引きつづき「世界が君を待ってい」ます。

＜log＞
Rubyistの向けのお話。
　ruby hackerとrubyistとの違い。

　赤いピルを飲むと今までと違う世界になる。

2008.10.25

世界とはMatrixだた。

Tim Brayのお話
　工場の部品になったような感じ。

Bruce A.Tate
 small temasで作る。

実際の生産性
　費用に対して、得られる効果が多い。
　少ないチームで開発する。少ない費用で開発できる。

merbとかやっている人のお話。

使う人にどうやって、

歩くRubyRevolution 2038年問題。

仕事？　大規模？

生産性？

安定、安心？

ドキュメントがないのはRubyの文化？
　コードを読みに行かせる。

コミュニティ？
　

栃木での某有料Ruby

全体では、そんなにコストがかわらない。

エンタープライズRubyの真実
→愛こそはすべて


Railsを使っているばかりではなくなってきている
　ちゃんとどれを使うかを考えていく必要があるところにきている？

Ruby wayなフレームワークにしていきたい。

rubyとrailsが仲良くできるよういsいたい
　→答えがない。


Rubyistの種類


コミュニケーションギャッップ
日本語と英語
RubyとRails
たのしいと勤勉

コミュニケーションギャップを埋める活動をしている。→asakusa.rb

Ruby1.9.21は良いリリースになると思う。


いつもお世話になっているRubyの開発に絡みたい

Ruby1.9&Rails

Ruby

Ruby2010について
　

自分なりにRubyに関わることが大切。
　→何もコードに関係する仕事だけではない。

このイベントにくるのも何かのきっかけになる。これもRubyに関わっている。


